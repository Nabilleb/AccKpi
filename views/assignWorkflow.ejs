<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Workflow | Engineering System</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="/styles/workflow.css">
</head>
<body>
  <div class="form-container">
    <h1><i class="fas fa-project-diagram"></i> Add Workflow</h1>
    
    <form action="/postWorkflow" method="POST" class="form-grid">
      <div class="form-row">
        <label for="WorkflowName">Workflow Name</label>
        <input type="text" name="WorkflowName" id="WorkflowName" required placeholder="Enter workflow name">
      </div>

      <div class="form-row">
        <label for="usrID">Finished by</label>
        <select name="usrID" id="usrID">
          <option value="">-- Select User --</option>
          <% users.forEach(user => { %>
            <option value="<%= user.usrID %>"><%= user.usrDesc %></option>
          <% }) %>
        </select>
      </div>

      <div class="form-row">
        <label for="TaskID">Task</label>
        <select name="TaskID" id="TaskID" required>
          <option value="">-- Select Task --</option>
          <% tasks.forEach(task => { %>
            <option value="<%= task.TaskID %>"><%= task.TaskName %></option>
          <% }) %>
        </select>
      </div>

      <div class="form-row">
        <label for="PkgeID">Package</label>
        <select name="PkgeID" id="PkgeID" required>
          <option value="">-- Select Package --</option>
          <% packages.forEach(pkg => { %>
            <option value="<%= pkg.PkgeID %>"><%= pkg.PkgeName %></option>
          <% }) %>
        </select>
      </div>

      <div class="form-row">
        <label for="TimeStarted">Start Date & Time</label>
        <input type="datetime-local" name="TimeStarted" id="TimeStarted" required>
      </div>

      <div class="form-row">
        <label for="TimeFinished">Completion Date & Time (optional)</label>
        <input type="datetime-local" name="TimeFinished" id="TimeFinished">
      </div>

      <div class="form-actions">
        <button type="reset" class="btn btn-secondary">
          <i class="fas fa-undo"></i> Reset
        </button>
        <button type="submit" class="btn btn-primary">
          <i class="fas fa-save"></i> Create Workflow
        </button>
      </div>
    </form>
  </div>

  <script>
    const taskSelect = document.getElementById("TaskID");
    const packageSelect = document.getElementById("PkgeID");
    const form = document.querySelector("form");

    async function fetchAndFillWorkflow() {
      const taskID = taskSelect.value;
      const pkgeID = packageSelect.value;

      if (!taskID || !pkgeID) return;

      try {
        const res = await fetch(`/getWorkflow?TaskID=${taskID}&PkgeID=${pkgeID}`);
        const data = await res.json();

        if (data) {
          document.getElementById("WorkflowName").value = data.WorkflowName || "";
          document.getElementById("usrID").value = data.usrID || "";
          
          if (data.TimeStarted) {
            const startDate = new Date(data.TimeStarted);
            document.getElementById("TimeStarted").value = startDate.toISOString().slice(0, 16);
          }
          
          if (data.TimeFinished) {
            const endDate = new Date(data.TimeFinished);
            document.getElementById("TimeFinished").value = endDate.toISOString().slice(0, 16);
          }
        } else {
          document.getElementById("WorkflowName").value = "";
          document.getElementById("usrID").value = "";
          document.getElementById("TimeStarted").value = "";
          document.getElementById("TimeFinished").value = "";
        }
      } catch (error) {
        console.error("Error fetching workflow:", error);
      }
    }

    // Form submission handler
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      
      const submitBtn = form.querySelector('button[type="submit"]');
      submitBtn.classList.add('loading');
      submitBtn.innerHTML = '<i class="fas fa-spinner"></i> Creating...';
      
      try {
        const response = await fetch(form.action, {
          method: 'POST',
          body: new FormData(form)
        });
        
        if (response.ok) {
          window.location.href = '/workflows?success=true';
        } else {
          alert('Error creating workflow');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to create workflow');
      } finally {
        submitBtn.classList.remove('loading');
        submitBtn.innerHTML = '<i class="fas fa-save"></i> Create Workflow';
      }
    });

    taskSelect.addEventListener("change", fetchAndFillWorkflow);
    packageSelect.addEventListener("change", fetchAndFillWorkflow);
  </script>
</body>
</html>