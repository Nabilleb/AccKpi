<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Add New Task</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
  <style>
    :root {
      --primary: #2563eb;
      --primary-light: #dbeafe;
      --primary-lighter: #eff6ff;
      --primary-dark: #1d4ed8;
      --secondary: #64748b;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --text: #1e293b;
      --text-light: #64748b;
      --border: #e2e8f0;
      --background: #f8fafc;
      --white: #ffffff;
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
      --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
      --gradient: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: var(--background);
      color: var(--text);
      padding: 2rem;
      line-height: 1.5;
    }

    @supports (font-variation-settings: normal) {
      body { font-family: 'Inter var', -apple-system, BlinkMacSystemFont, sans-serif; }
    }

    .form-container {
      max-width: 900px;
      margin: 2rem auto;
      background: var(--white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .form-container:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg), 0 15px 30px rgba(0,0,0,0.12);
    }

    .form-header {
      background: var(--gradient);
      color: var(--white);
      padding: 1.75rem 2.5rem;
      position: relative;
      overflow: hidden;
    }

    .form-header::before {
      content: "";
      position: absolute;
      top: -50px;
      right: -50px;
      width: 150px;
      height: 150px;
      background: rgba(255,255,255,0.1);
      border-radius: 50%;
    }

    .form-header::after {
      content: "";
      position: absolute;
      bottom: -80px;
      right: -30px;
      width: 200px;
      height: 200px;
      background: rgba(255,255,255,0.05);
      border-radius: 50%;
    }

    .form-header h1 {
      font-size: 1.75rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 1rem;
      margin: 0;
      position: relative;
      z-index: 1;
    }

    .form-header i {
      font-size: 1.5em;
      color: rgba(255,255,255,0.9);
    }

    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.75rem;
      padding: 2.5rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      position: relative;
    }

    label {
      font-weight: 600;
      color: var(--text);
      font-size: 0.95rem;
    }

    .required-field::after {
      content: " *";
      color: var(--danger);
    }

    input, select, textarea {
      padding: 0.875rem 1.25rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      font-size: 1rem;
      transition: all 0.2s ease;
      background: var(--white);
      width: 100%;
    }

    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    input::placeholder, textarea::placeholder {
      color: var(--text-light);
      opacity: 0.6;
    }

    .form-actions {
      grid-column: 1 / -1;
      display: flex;
      justify-content: flex-end;
      gap: 1.25rem;
      border-top: 1px solid var(--border);
      padding: 1.75rem 2.5rem;
      margin-top: 1rem;
    }

    .btn {
      padding: 0.875rem 1.75rem;
      border: none;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      transition: all 0.2s ease;
      font-size: 1rem;
    }

    .btn-primary {
      background: var(--gradient);
      color: var(--white);
      box-shadow: 0 4px 6px rgba(59, 130, 246, 0.15);
    }

    .btn-primary:hover {
      background: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: 0 6px 12px rgba(59, 130, 246, 0.2);
    }

    .btn-secondary {
      background: var(--white);
      border: 1px solid var(--border);
      color: var(--text);
    }

    .btn-secondary:hover {
      background: var(--background);
      border-color: var(--text-light);
    }

    .btn-success {
      background: var(--success);
      color: white;
    }

    .btn-danger {
      background: var(--danger);
      color: white;
    }

    .workflow-info {
      background: var(--primary-light);
      padding: 1.25rem;
      border-radius: var(--radius-sm);
      grid-column: 1 / -1;
      font-size: 0.95rem;
      border-left: 4px solid var(--primary);
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .workflow-info i {
      color: var(--primary);
      margin-right: 0.5rem;
    }

    .success-message {
      background: rgba(16, 185, 129, 0.1);
      padding: 1.25rem;
      border-radius: var(--radius-sm);
      grid-column: 1 / -1;
      font-size: 0.95rem;
      border-left: 4px solid var(--success);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .success-message i {
      color: var(--success);
      font-size: 1.25rem;
    }

    .process-steps {
      grid-column: 1 / -1;
      margin-top: 0.5rem;
      padding: 1.5rem;
      background: var(--background);
      border-radius: var(--radius-md);
      border: 1px dashed var(--border);
      position: relative;
      overflow: hidden;
    }

    .process-steps::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--gradient);
    }

    .process-steps h3 {
      margin: 0 0 1rem 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .process-steps h3 i {
      font-size: 1.25rem;
    }

    .process-steps ol {
      padding-left: 1.5rem;
      margin: 0;
      display: grid;
      gap: 0.75rem;
    }

    .process-steps li {
      padding-left: 0.5rem;
    }

    .process-steps li::marker {
      color: var(--primary);
      font-weight: 600;
    }

    /* Tasks Container Styles */
    #tasks-container {
      padding: 0 2.5rem 2.5rem;
    }

    .tasks-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .tasks-header h2 {
      color: var(--primary);
      font-size: 1.5rem;
      margin: 0;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .refresh-btn {
      background: var(--primary-light);
      color: var(--primary);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
    }

    .refresh-btn:hover {
      background: var(--primary);
      color: white;
    }

    .department-group {
      margin-bottom: 2rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-md);
      overflow: hidden;
      box-shadow: var(--shadow-md);
    }

    .department-header {
      background: var(--primary-light);
      padding: 1rem 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      border-bottom: 1px solid var(--border);
    }

    .department-header h3 {
      margin: 0;
      color: var(--primary);
      font-size: 1.1rem;
    }

    .tasks-table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.95rem;
    }

    .tasks-table th {
      background: var(--primary-lighter);
      text-align: left;
      padding: 0.75rem 1rem;
      border-bottom: 2px solid var(--primary);
      color: var(--primary);
      cursor: pointer;
      user-select: none;
    }

    .tasks-table td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--border);
      vertical-align: top;
    }

    .tasks-table tr:last-child td {
      border-bottom: none;
    }

    .tasks-table tr:hover td {
      background: var(--primary-light);
    }

    .status-badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 1rem;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .status-pending {
      background: #fef3c7;
      color: #92400e;
    }

    .status-completed {
      background: #d1fae5;
      color: #065f46;
    }

    .status-delayed {
      background: #fee2e2;
      color: #991b1b;
    }

    .status-in-progress {
      background: #dbeafe;
      color: #1e40af;
    }

    .no-tasks {
      padding: 2rem;
      text-align: center;
      color: var(--text-light);
      font-size: 1rem;
    }

    /* New styles for enhanced UX */
    .overdue-task {
      background-color: rgba(239, 68, 68, 0.05) !important;
    }
    
    .overdue-task:hover td {
      background-color: rgba(239, 68, 68, 0.1) !important;
    }
    
    .delay-warning {
      color: var(--danger);
      font-weight: 600;
    }
    
    .task-count {
      margin-left: auto;
      font-size: 0.9rem;
      color: var(--text-light);
    }
    
    .char-counter {
      font-size: 0.8rem;
      color: var(--text-light);
      margin-top: 0.25rem;
    }
    
    [aria-invalid="true"] {
      border-color: var(--danger) !important;
    }
    
    .validation-error {
      color: var(--danger);
      font-size: 0.8rem;
      margin-top: 0.25rem;
      display: none;
    }
    
    .search-container {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .search-input {
      flex: 1;
      padding: 0.5rem 1rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
    }
    
    .pagination {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 1rem;
    }
    
    .page-btn {
      padding: 0.5rem 0.75rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      cursor: pointer;
      background: white;
    }
    
    .page-btn.active {
      background: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    .skeleton-row {
      height: 50px;
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: shimmer 1.5s infinite;
      margin-bottom: 0.5rem;
      border-radius: var(--radius-sm);
    }
    
    @keyframes shimmer {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .form-grid {
        grid-template-columns: 1fr;
        padding: 1.5rem;
        gap: 1.25rem;
      }
      
      .form-header {
        padding: 1.5rem;
      }
      
      .form-actions {
        padding: 1.5rem;
        flex-direction: column-reverse;
      }
      
      .btn {
        width: 100%;
        justify-content: center;
      }

      #tasks-container {
        padding: 0 1.5rem 1.5rem;
      }

      .tasks-table {
        display: block;
        overflow-x: auto;
      }
      
      .search-container {
        flex-direction: column;
      }
    }

    /* Animation for form elements */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .form-group {
      animation: fadeIn 0.4s ease forwards;
    }

    .form-group:nth-child(1) { animation-delay: 0.1s; }
    .form-group:nth-child(2) { animation-delay: 0.2s; }
    .form-group:nth-child(3) { animation-delay: 0.3s; }
    .form-group:nth-child(4) { animation-delay: 0.4s; }
    .form-group:nth-child(5) { animation-delay: 0.5s; }
    .form-actions { animation-delay: 0.6s; }

    /* Loading spinner */
    .spinner {
      display: inline-block;
      width: 1rem;
      height: 1rem;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

      .navigation-buttons {
    display: flex;
    gap: 1rem;
    max-width: 900px;
    margin: 0 auto 1.5rem;
  }
  </style>
</head>
<body>



<div class="form-container">
  <div class="form-header">
    <h1><i class="fas fa-tasks"></i>Create New Task</h1>
  </div>

  <% if (typeof success !== 'undefined' && success) { %>
    <div class="success-message">
      <i class="fas fa-check-circle"></i>
      <div><%= success %></div>
    </div>
  <% } %>

  <form id="taskForm" action="/add-task" method="POST" class="form-grid">
    <input type="hidden" name="ProcessID" value="<%= workflowDetails.ProcessID %>">
    
    <div class="workflow-info">
      <div><i class="fas fa-sitemap"></i> <strong>Process:</strong> <%= workflowDetails.ProcessName %></div>
     
      <div><i class="fas fa-layer-group"></i> <strong>Steps:</strong> <%= processSteps.length %></div>
    
    </div>

    <% if (processSteps && processSteps.length > 0) { %>
      <div class="process-steps">
        <h3><i class="fas fa-list-ol"></i> Process Steps</h3>
        <ol>
          <% processSteps.forEach(step => { %>
            <li><strong>Step <%= step.StepOrder %>:</strong> <%= step.DeptName %></li>
          <% }) %>
        </ol>
      </div>
    <% } %>

    <div class="form-group">

        <div class="form-group">
      <label for="DepId" class="required-field">Responsible Department</label>
      <select name="DepId" id="DepId" required>
        <option value="">Select a department</option>
        <% departments.forEach(d => { %>
          <option value="<%= d.DepartmentID %>" <%= d.DepartmentID === departmentId ? "selected" : "" %>><%= d.DeptName %></option>
        <% }) %>
      </select>
      <div class="validation-error" id="DepId-error">Please select a department</div>
    </div>

      <label for="TaskName" class="required-field">Task Name</label>
      <input type="text" name="TaskName" id="TaskName" required placeholder="e.g., Review Design Mockups" maxlength="100"/>
      <div class="char-counter" id="TaskName-counter">0/100</div>
      <div class="validation-error" id="TaskName-error">Task name is required</div>
    </div>

    <div class="form-group">
      <label for="TaskPlanned" class="required-field">Task Description</label>
      <textarea name="TaskPlanned" id="TaskPlanned" required placeholder="Describe what needs to be done" maxlength="255" rows="3"></textarea>
      <div class="char-counter" id="TaskPlanned-counter">0/255</div>
      <div class="validation-error" id="TaskPlanned-error">Description is required</div>
    </div>

    <div class="form-group">
      <label for="IsDateFixed">Fixed Deadline?</label>
      <select name="IsDateFixed" id="IsDateFixed">
        <option value="1">Yes</option>
        <option value="0" selected>No</option>
      </select>
    </div>

    <div class="form-group">
      <label for="DaysRequired" class="required-field">Estimated Days</label>
      <input type="number" name="DaysRequired" id="DaysRequired" min="1" required placeholder="3"/>
      <div class="validation-error" id="DaysRequired-error">Please enter a valid number of days</div>
    </div>

  

    <div class="form-actions">
      
      <button type="submit" class="btn btn-primary" id="submit-btn">
        <i class="fas fa-plus-circle"></i> Create Task
      </button>
    </div>
  </form>
  
  <div id="tasks-container">
    <div class="tasks-header">
      <h2><i class="fas fa-clipboard-list"></i> Current Tasks</h2>
      <div>
        <button class="refresh-btn" id="refresh-tasks">
          <i class="fas fa-sync-alt"></i> Refresh
        </button>
      </div>
    </div>
    
    <div class="search-container">
      <input type="text" class="search-input" id="task-search" placeholder="Search tasks...">
      <select class="search-input" id="status-filter">
        <option value="">All Statuses</option>
        <option value="pending">Pending</option>
        <option value="in-progress">In Progress</option>
        <option value="completed">Completed</option>
        <option value="delayed">Delayed</option>
      </select>
    </div>
    
    <div id="tasks-loading">
      <!-- Loading skeleton -->
      <div class="skeleton-row"></div>
      <div class="skeleton-row"></div>
      <div class="skeleton-row"></div>
    </div>
    <div id="tasks-content" style="display: none;"></div>
    
    <div class="pagination" id="pagination" style="display: none;"></div>
  </div>
 
<div class="navigation-buttons" style="margin-bottom: 1.5rem;">
  <a href="/addProcess" class="btn btn-secondary">
    <i class="fas fa-arrow-left"></i> Close
  </a>
 <a href="/workflow/new" class="btn btn-primary">
    <i class="fas fa-plus"></i> Create New Workflow
  </a>
</div>

</div>

<script>
// Global variables
let isLoading = false;
let currentTasks = [];
let currentPage = 1;
const tasksPerPage = 10;
const processId = "<%= workflowDetails.ProcessID %>";
const processSteps = <%- JSON.stringify(processSteps) %>;

const sortFunctions = {
  name: (a, b) => (a.TaskName || '').localeCompare(b.TaskName || ''),
  description: (a, b) => (a.TaskPlanned || '').localeCompare(b.TaskPlanned || ''),
  department: (a, b) => (a.DeptName || '').localeCompare(b.DeptName || ''),
  duedate: (a, b) => new Date(a.PlannedDate) - new Date(b.PlannedDate),
  priority: (a, b) => (a.Priority ?? 0) - (b.Priority ?? 0),
  sequence: (a, b) => {
    const stepA = a.StepOrder ?? 0;
    const stepB = b.StepOrder ?? 0;
    if (stepA !== stepB) return stepA - stepB;
    return (a.TaskID ?? 0) - (b.TaskID ?? 0);
  }
};
// DOM Content Loaded
document.addEventListener('DOMContentLoaded', function() {
  // Initialize form validation
  setupFormValidation();
  
  // Initialize department selection logic
  setupDepartmentSelection();
  
  // Load tasks for this process
  loadTasks();
  
  // Set up periodic refresh (every 2 minutes)
  setInterval(() => {
    if (!isLoading && document.visibilityState === 'visible') {
      loadTasks();
    }
  }, 120000);
  
  // Set up task search functionality
  document.getElementById('task-search').addEventListener('input', function() {
    filterAndRenderTasks();
  });
  
  // Set up status filter
  document.getElementById('status-filter').addEventListener('change', function() {
    filterAndRenderTasks();
  });
  
  // Set up refresh button
  document.getElementById('refresh-tasks').addEventListener('click', function() {
    if (!isLoading) {
      loadTasks();
    }
  });
});

// Form Validation
function setupFormValidation() {
  const form = document.getElementById('taskForm');
  const inputs = form.querySelectorAll('input, select, textarea');
  
  // Real-time validation
  inputs.forEach(input => {
    input.addEventListener('input', () => {
      validateField(input);
      
      // Update character counters for text inputs
      if (input.type === 'text' || input.tagName === 'TEXTAREA') {
        const counterId = input.id + '-counter';
        const counter = document.getElementById(counterId);
        if (counter) {
          counter.textContent = `${input.value.length}/${input.maxLength}`;
        }
      }
    });
    
    // Add blur validation
    input.addEventListener('blur', () => {
      validateField(input);
    });
  });
  
  // Form submission validation
  form.addEventListener('submit', function(e) {
    let isValid = true;
    inputs.forEach(input => {
      if (!validateField(input)) {
        isValid = false;
      }
    });
    
    if (!isValid) {
      e.preventDefault();
      showToast('Please fix the errors in the form', true);
      
      // Scroll to first error
      const firstError = document.querySelector('.validation-error:not([style*="display: none"])');
      if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    } else {
      // Show loading state on submit button
      const submitBtn = document.getElementById('submit-btn');
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
    }
  });
}

function validateField(field) {
  const errorElement = document.getElementById(`${field.id}-error`);
  
  if (field.required && !field.value.trim()) {
    showError(field, errorElement, 'This field is required');
    return false;
  }
  
  // Specific validations
  if (field.id === 'DaysRequired' && (isNaN(field.value) || field.value < 1)) {
    showError(field, errorElement, 'Please enter a valid number of days');
    return false;
  }
  
  // If we get here, field is valid
  clearError(field, errorElement);
  return true;
}

function showError(field, errorElement, message) {
  field.style.borderColor = 'var(--danger)';
  field.style.boxShadow = '0 0 0 3px rgba(239, 68, 68, 0.15)';
  
  if (errorElement) {
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }
  
  return false;
}

function clearError(field, errorElement) {
  field.style.borderColor = '';
  field.style.boxShadow = '';
  
  if (errorElement) {
    errorElement.style.display = 'none';
  }
  
  return true;
}

// Department Selection Logic
function setupDepartmentSelection() {
  const depSelect = document.getElementById('DepId');
  if (!depSelect) return;
  
  let debounceTimer;
  
  depSelect.addEventListener('change', function() {
    clearTimeout(debounceTimer);
    
    // Show loading state
    const daysInput = document.getElementById('DaysRequired');
    daysInput.disabled = true;
    daysInput.placeholder = 'Checking department...';
    
    debounceTimer = setTimeout(() => {
      const selectedDepId = this.value;
      if (!processId || !selectedDepId) return;
      
      fetch(`/api/check-department-step?processId=${processId}&depId=${selectedDepId}`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok.');
          return response.json();
        })
        .then(data => {
          if (data.isFirstStep && !data.hasTasks) {
            daysInput.value = 1;
            daysInput.disabled = true;
            showToast('This is the first step with no existing tasks. Days set to 1.');
          } else {
            daysInput.disabled = false;
            daysInput.value = '';
            daysInput.placeholder = 'Enter estimated days';
          }
        })
        .catch(err => {
          console.error('Error:', err);
          daysInput.disabled = false;
          showToast('Error checking department status', true);
        });
    }, 500); // 500ms debounce
  });
}

// Task Loading and Rendering
function loadTasks() {
  if (!processId) return;
  
  isLoading = true;
  const loadingEl = document.getElementById('tasks-loading');
  const contentEl = document.getElementById('tasks-content');
  const paginationEl = document.getElementById('pagination');

  // Show loading state
  loadingEl.style.display = 'block';
  contentEl.style.display = 'none';
  paginationEl.style.display = 'none';
  
  // Show loading skeleton
  loadingEl.innerHTML = `
    <div class="skeleton-row"></div>
    <div class="skeleton-row"></div>
    <div class="skeleton-row"></div>
  `;

  fetch(`/api/tasks?processId=${processId}`)
    .then(response => {
      if (!response.ok) throw new Error('Network response was not ok');
      return response.json();
    })
    .then(data => {
      currentTasks = data;
      filterAndRenderTasks();
    })
    .catch(error => {
      console.error('Error loading tasks:', error);
      loadingEl.innerHTML = `
        <div class="no-tasks">
          <i class="fas fa-exclamation-circle" style="color:var(--danger);font-size:2rem;margin-bottom:1rem;"></i>
          <p>Error loading tasks. Please try again.</p>
          <button class="btn btn-primary" onclick="loadTasks()">
            <i class="fas fa-sync-alt"></i> Retry
          </button>
        </div>`;
    })
    .finally(() => {
      isLoading = false;
    });
}

function filterAndRenderTasks() {
    const searchTerm = document.getElementById('task-search').value.toLowerCase();
    const statusFilter = document.getElementById('status-filter').value;
    
    // Filter tasks
    let filteredTasks = [...currentTasks]; // Create a copy
    
    // Reverse the array to show newest first (original order is oldest first)
    filteredTasks.reverse();
    
    if (searchTerm) {
      filteredTasks = filteredTasks.filter(task => 
        (task.TaskName && task.TaskName.toLowerCase().includes(searchTerm)) ||
        (task.TaskPlanned && task.TaskPlanned.toLowerCase().includes(searchTerm))
      );
    }
    
    if (statusFilter) {
      filteredTasks = filteredTasks.filter(task => getTaskStatus(task) === statusFilter);
    }
    
    // Render paginated results
    renderPaginatedTasks(filteredTasks);
  }
function renderPaginatedTasks(tasks) {
  const contentEl = document.getElementById('tasks-content');
  const loadingEl = document.getElementById('tasks-loading');
  const paginationEl = document.getElementById('pagination');
  
  if (!tasks || tasks.length === 0) {
    contentEl.innerHTML = `
      <div class="no-tasks">
        <i class="fas fa-inbox"></i>
        <p>No tasks found matching your criteria.</p>
      </div>`;
    loadingEl.style.display = 'none';
    contentEl.style.display = 'block';
    paginationEl.style.display = 'none';
    return;
  }
  
  // Calculate pagination
  const totalPages = Math.ceil(tasks.length / tasksPerPage);
  currentPage = Math.min(currentPage, totalPages);
  
  // Get tasks for current page
  const startIdx = (currentPage - 1) * tasksPerPage;
  const endIdx = startIdx + tasksPerPage;
  const paginatedTasks = tasks.slice(startIdx, endIdx);
  
  // Render tasks
  renderTasks(paginatedTasks);
  
  // Render pagination controls
  renderPagination(totalPages);
  
  // Update UI
  loadingEl.style.display = 'none';
  contentEl.style.display = 'block';
  paginationEl.style.display = 'flex';
}

function renderTasks(tasks) {
  const contentEl = document.getElementById('tasks-content');

  // Group tasks by department and attach StepOrder from processSteps
  const grouped = {};
  tasks.forEach(task => {
    if (!grouped[task.DepId]) {
      grouped[task.DepId] = {
        DeptName: task.DeptName,
        StepOrder: processSteps.find(p => p.DepartmentID === task.DepId)?.StepOrder ?? 9999,
        Tasks: []
      };
    }
    grouped[task.DepId].Tasks.push(task);
  });

  // Convert grouped object to array and sort departments by StepOrder
  const sortedGroups = Object.values(grouped).sort(
    (a, b) => a.StepOrder - b.StepOrder
  );

  let html = '';
  for (const group of sortedGroups) {
    // Sort tasks by Priority ASC
    group.Tasks.sort((a, b) => (a.Priority ?? 9999) - (b.Priority ?? 9999));

    html += `
      <div class="department-group">
        <div class="department-header">
          <i class="fas fa-building"></i>
          <h3>${group.DeptName}</h3>
          <span class="task-count">${group.Tasks.length} tasks</span>
        </div>
        <div style="overflow-x:auto;">
          <table class="tasks-table">
            <thead>
              <tr>
                <th>Task Name</th>
                <th>Description</th>
                <th>Planned Date</th>
                <th>Days</th>
                <th>Status</th>
                <th>Started</th>
                <th>Finished</th>
                <th>Priority</th>
              </tr>
            </thead>
            <tbody>`;

    group.Tasks.forEach(task => {
      const status = getTaskStatus(task);
      const statusBadge = getStatusBadge(status);
      const isOverdue = status === 'delayed' ||
        (status === 'pending' && new Date(task.PlannedDate) < new Date());

      html += `
        <tr class="${isOverdue ? 'overdue-task' : ''}">
          <td>${task.TaskName || '-'}</td>
          <td>${task.TaskPlanned || '-'}</td>
          <td>${task.PlannedDate ? formatDate(task.PlannedDate) : '-'}</td>
          <td>${task.DaysRequired || '-'}</td>
          <td>${statusBadge}</td>
          <td>${task.TimeStarted ? formatDateTime(task.TimeStarted) : '-'}</td>
          <td>${task.TimeFinished ? formatDateTime(task.TimeFinished) : '-'}</td>
          <td>${task.Priority ?? '-'}</td>
        </tr>`;
    });

    html += `</tbody></table></div></div>`;
  }

  contentEl.innerHTML = html;

  // Make table headers sortable (except "Status")
  const tables = document.querySelectorAll('.tasks-table');
  tables.forEach(table => {
    const headers = table.querySelectorAll('th');
    headers.forEach((header, index) => {
      if (header.textContent.trim() !== 'Status') {
        header.style.cursor = 'pointer';
        header.addEventListener('click', () => {
          sortTable(table, index);
        });
      }
    });
  });
}

function renderPagination(totalPages) {
  const paginationEl = document.getElementById('pagination');
  
  if (totalPages <= 1) {
    paginationEl.style.display = 'none';
    return;
  }
  
  let html = '';
  
  // Previous button
  html += `
    <button class="page-btn" ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
      <i class="fas fa-chevron-left"></i>
    </button>`;
  
  // Page numbers
  const maxVisiblePages = 5;
  let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
  let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
  
  if (endPage - startPage + 1 < maxVisiblePages) {
    startPage = Math.max(1, endPage - maxVisiblePages + 1);
  }
  
  if (startPage > 1) {
    html += `<button class="page-btn" onclick="changePage(1)">1</button>`;
    if (startPage > 2) {
      html += `<span class="page-btn" style="cursor:default;">...</span>`;
    }
  }
  
  for (let i = startPage; i <= endPage; i++) {
    html += `
      <button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
        ${i}
      </button>`;
  }
  
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      html += `<span class="page-btn" style="cursor:default;">...</span>`;
    }
    html += `<button class="page-btn" onclick="changePage(${totalPages})">${totalPages}</button>`;
  }
  
  // Next button
  html += `
    <button class="page-btn" ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
      <i class="fas fa-chevron-right"></i>
    </button>`;
  
  paginationEl.innerHTML = html;
}

function changePage(newPage) {
  currentPage = newPage;
  filterAndRenderTasks();
  window.scrollTo({ top: document.getElementById('tasks-container').offsetTop, behavior: 'smooth' });
}

function sortTable(table, columnIndex) {
  const tbody = table.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr'));
  
  // Determine sort direction
  const isAscending = table.dataset.sortedColumn !== String(columnIndex) || 
                     table.dataset.sortedDirection === 'desc';
  
  rows.sort((a, b) => {
    const aText = a.cells[columnIndex].textContent.trim();
    const bText = b.cells[columnIndex].textContent.trim();
    
    // Special handling for dates
    if (columnIndex === 2 || columnIndex === 5 || columnIndex === 6) {
      const aDate = new Date(aText);
      const bDate = new Date(bText);
      return isAscending ? aDate - bDate : bDate - aDate;
    }
    
    // Numeric columns
    if (columnIndex === 3 || columnIndex === 7) {
      const aNum = parseInt(aText) || 0;
      const bNum = parseInt(bText) || 0;
      return isAscending ? aNum - bNum : bNum - aNum;
    }
    
    // Status column (special handling)
    if (columnIndex === 4) {
      const aStatus = a.cells[columnIndex].querySelector('.status-badge')?.textContent.trim() || '';
      const bStatus = b.cells[columnIndex].querySelector('.status-badge')?.textContent.trim() || '';
      return isAscending ? aStatus.localeCompare(bStatus) : bStatus.localeCompare(aStatus);
    }
    
    // Default text comparison
    return isAscending ? aText.localeCompare(bText) : bText.localeCompare(aText);
  });
  
  // Update sort state
  table.dataset.sortedColumn = columnIndex;
  table.dataset.sortedDirection = isAscending ? 'asc' : 'desc';
  
  // Rebuild table
  rows.forEach(row => tbody.appendChild(row));
  
  // Update sort indicators
  const headers = table.querySelectorAll('th');
  headers.forEach((header, i) => {
    header.innerHTML = header.textContent; // Remove any existing icons
    
    if (i === columnIndex) {
      const icon = document.createElement('i');
      icon.className = 'fas';
      icon.classList.add(isAscending ? 'fa-arrow-up' : 'fa-arrow-down');
      icon.style.marginLeft = '0.5rem';
      header.appendChild(icon);
    }
  });
}

// Utility Functions
function getTaskStatus(task) {
  if (task.TimeFinished) return 'completed';
  if (task.TimeStarted) return 'in-progress';
  if (task.Delay > 0) return 'delayed';
  return 'pending';
}

function getStatusBadge(status) {
  switch (status) {
    case 'completed':
      return `<span class="status-badge status-completed"><i class="fas fa-check-circle"></i> Completed</span>`;
    case 'in-progress':
      return `<span class="status-badge status-in-progress"><i class="fas fa-spinner fa-pulse"></i> In Progress</span>`;
    case 'delayed':
      return `<span class="status-badge status-delayed"><i class="fas fa-exclamation-triangle"></i> Delayed</span>`;
    default:
      return `<span class="status-badge status-pending"><i class="far fa-clock"></i> Pending</span>`;
  }
}

function formatDate(dateString) {
  if (!dateString) return '-';
  const options = { year: 'numeric', month: 'short', day: 'numeric' };
  return new Date(dateString).toLocaleDateString(undefined, options);
}

function formatDateTime(dateString) {
  if (!dateString) return '-';
  const options = {
    year: 'numeric', 
    month: 'short', 
    day: 'numeric', 
    hour: '2-digit', 
    minute: '2-digit'
  };
  return new Date(dateString).toLocaleString(undefined, options);
}

function showToast(message, isError = false) {
  const toast = document.createElement('div');
  toast.style.position = 'fixed';
  toast.style.bottom = '1rem';
  toast.style.right = '1rem';
  toast.style.padding = '1rem 1.5rem';
  toast.style.background = isError ? 'var(--danger)' : 'var(--success)';
  toast.style.color = 'white';
  toast.style.borderRadius = '6px';
  toast.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
  toast.style.fontSize = '0.95rem';
  toast.style.zIndex = '9999';
  toast.style.display = 'flex';
  toast.style.alignItems = 'center';
  toast.style.gap = '0.5rem';
  toast.style.animation = 'fadeIn 0.3s ease forwards';
  toast.innerHTML = `
    <i class="fas ${isError ? 'fa-exclamation-triangle' : 'fa-check-circle'}"></i>
    ${message}
  `;
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.style.animation = 'fadeOut 0.3s ease forwards';
    setTimeout(() => toast.remove(), 300);
  }, 3000);
}

// Add fadeOut animation to style
const style = document.createElement('style');
style.textContent = `
  @keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(10px); }
  }
`;
document.head.appendChild(style);

// Set up character counters
document.getElementById('TaskName').addEventListener('input', function() {
  document.getElementById('TaskName-counter').textContent = `${this.value.length}/100`;
});

document.getElementById('TaskPlanned').addEventListener('input', function() {
  document.getElementById('TaskPlanned-counter').textContent = `${this.value.length}/255`;
});
</script>
</body>
</html>