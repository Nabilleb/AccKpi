<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Add New Task</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
  <style>
    :root {
      --primary: #2563eb;
      --primary-light: #dbeafe;
      --primary-lighter: #eff6ff;
      --primary-dark: #1d4ed8;
      --secondary: #64748b;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --text: #1e293b;
      --text-light: #64748b;
      --border: #e2e8f0;
      --background: #f8fafc;
      --white: #ffffff;
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
      --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
      --gradient: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: var(--background);
      color: var(--text);
      padding: 2rem;
      line-height: 1.5;
    }

    @supports (font-variation-settings: normal) {
      body { font-family: 'Inter var', -apple-system, BlinkMacSystemFont, sans-serif; }
    }

    .form-container {
      max-width: 900px;
      margin: 2rem auto;
      background: var(--white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .form-container:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg), 0 15px 30px rgba(0,0,0,0.12);
    }

    .form-header {
      background: var(--gradient);
      color: var(--white);
      padding: 1.75rem 2.5rem;
      position: relative;
      overflow: hidden;
    }

    .form-header::before {
      content: "";
      position: absolute;
      top: -50px;
      right: -50px;
      width: 150px;
      height: 150px;
      background: rgba(255,255,255,0.1);
      border-radius: 50%;
    }

    .form-header::after {
      content: "";
      position: absolute;
      bottom: -80px;
      right: -30px;
      width: 200px;
      height: 200px;
      background: rgba(255,255,255,0.05);
      border-radius: 50%;
    }

    .form-header h1 {
      font-size: 1.75rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 1rem;
      margin: 0;
      position: relative;
      z-index: 1;
    }

    .form-header i {
      font-size: 1.5em;
      color: rgba(255,255,255,0.9);
    }

    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.75rem;
      padding: 2.5rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    label {
      font-weight: 600;
      color: var(--text);
      font-size: 0.95rem;
    }

    .required-field::after {
      content: " *";
      color: var(--danger);
    }

    input, select {
      padding: 0.875rem 1.25rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      font-size: 1rem;
      transition: all 0.2s ease;
      background: var(--white);
    }

    input:focus, select:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    input::placeholder {
      color: var(--text-light);
      opacity: 0.6;
    }

    .form-actions {
      grid-column: 1 / -1;
      display: flex;
      justify-content: flex-end;
      gap: 1.25rem;
      border-top: 1px solid var(--border);
      padding: 1.75rem 2.5rem;
      margin-top: 1rem;
    }

    .btn {
      padding: 0.875rem 1.75rem;
      border: none;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      transition: all 0.2s ease;
      font-size: 1rem;
    }

    .btn-primary {
      background: var(--gradient);
      color: var(--white);
      box-shadow: 0 4px 6px rgba(59, 130, 246, 0.15);
    }

    .btn-primary:hover {
      background: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: 0 6px 12px rgba(59, 130, 246, 0.2);
    }

    .btn-secondary {
      background: var(--white);
      border: 1px solid var(--border);
      color: var(--text);
    }

    .btn-secondary:hover {
      background: var(--background);
      border-color: var(--text-light);
    }

    .workflow-info {
      background: var(--primary-light);
      padding: 1.25rem;
      border-radius: var(--radius-sm);
      grid-column: 1 / -1;
      font-size: 0.95rem;
      border-left: 4px solid var(--primary);
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .workflow-info i {
      color: var(--primary);
      margin-right: 0.5rem;
    }

    .success-message {
      background: rgba(16, 185, 129, 0.1);
      padding: 1.25rem;
      border-radius: var(--radius-sm);
      grid-column: 1 / -1;
      font-size: 0.95rem;
      border-left: 4px solid var(--success);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .success-message i {
      color: var(--success);
      font-size: 1.25rem;
    }

    .process-steps {
      grid-column: 1 / -1;
      margin-top: 0.5rem;
      padding: 1.5rem;
      background: var(--background);
      border-radius: var(--radius-md);
      border: 1px dashed var(--border);
      position: relative;
      overflow: hidden;
    }

    .process-steps::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--gradient);
    }

    .process-steps h3 {
      margin: 0 0 1rem 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .process-steps h3 i {
      font-size: 1.25rem;
    }

    .process-steps ol {
      padding-left: 1.5rem;
      margin: 0;
      display: grid;
      gap: 0.75rem;
    }

    .process-steps li {
      padding-left: 0.5rem;
    }

    .process-steps li::marker {
      color: var(--primary);
      font-weight: 600;
    }

    /* Tasks Container Styles */
    #tasks-container {
      padding: 0 2.5rem 2.5rem;
    }

    .tasks-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .tasks-header h2 {
      color: var(--primary);
      font-size: 1.5rem;
      margin: 0;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .refresh-btn {
      background: var(--primary-light);
      color: var(--primary);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
    }

    .refresh-btn:hover {
      background: var(--primary);
      color: white;
    }

    .department-group {
      margin-bottom: 2rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-md);
      overflow: hidden;
      box-shadow: var(--shadow-md);
    }

    .department-header {
      background: var(--primary-light);
      padding: 1rem 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      border-bottom: 1px solid var(--border);
    }

    .department-header h3 {
      margin: 0;
      color: var(--primary);
      font-size: 1.1rem;
    }

    .tasks-table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.95rem;
    }

    .tasks-table th {
      background: var(--primary-lighter);
      text-align: left;
      padding: 0.75rem 1rem;
      border-bottom: 2px solid var(--primary);
      color: var(--primary);
    }

    .tasks-table td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--border);
      vertical-align: top;
    }

    .tasks-table tr:last-child td {
      border-bottom: none;
    }

    .tasks-table tr:hover td {
      background: var(--primary-light);
    }

    .status-badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 1rem;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .status-pending {
      background: #fef3c7;
      color: #92400e;
    }

    .status-completed {
      background: #d1fae5;
      color: #065f46;
    }

    .status-delayed {
      background: #fee2e2;
      color: #991b1b;
    }

    .no-tasks {
      padding: 2rem;
      text-align: center;
      color: var(--text-light);
      font-size: 1rem;
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .form-grid {
        grid-template-columns: 1fr;
        padding: 1.5rem;
        gap: 1.25rem;
      }
      
      .form-header {
        padding: 1.5rem;
      }
      
      .form-actions {
        padding: 1.5rem;
        flex-direction: column-reverse;
      }
      
      .btn {
        width: 100%;
        justify-content: center;
      }

      #tasks-container {
        padding: 0 1.5rem 1.5rem;
      }

      .tasks-table {
        display: block;
        overflow-x: auto;
      }
    }

    /* Animation for form elements */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .form-group {
      animation: fadeIn 0.4s ease forwards;
    }

    .form-group:nth-child(1) { animation-delay: 0.1s; }
    .form-group:nth-child(2) { animation-delay: 0.2s; }
    .form-group:nth-child(3) { animation-delay: 0.3s; }
    .form-group:nth-child(4) { animation-delay: 0.4s; }
    .form-group:nth-child(5) { animation-delay: 0.5s; }
    .form-actions { animation-delay: 0.6s; }

    /* Loading spinner */
    .spinner {
      display: inline-block;
      width: 1rem;
      height: 1rem;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
<div class="form-container">
  <div class="form-header">
    <h1><i class="fas fa-tasks"></i>Create New Task</h1>
  </div>

  <% if (typeof success !== 'undefined' && success) { %>
    <div class="success-message">
      <i class="fas fa-check-circle"></i>
      <div><%= success %></div>
    </div>
  <% } %>

  <form action="/add-task" method="POST" class="form-grid">
    <% if (workflowDetails) { %>
      <div class="workflow-info">
        <div><i class="fas fa-project-diagram"></i> <strong>Workflow ID:</strong> <%= workflowDetails.workFlowID %></div>
        <div><i class="fas fa-sitemap"></i> <strong>Process:</strong> <%= workflowDetails.ProcessName %></div>
        <div><i class="fas fa-box-open"></i> <strong>Package:</strong> <%= workflowDetails.PackageName %></div>
      </div>
      <input type="hidden" name="WorkFlowHdrID" value="<%= workflowDetails.workFlowID %>"/>
    <% } else { %>
      <div class="form-group">
        <label for="WorkFlowHdrID" class="required-field">Workflow Header</label>
        <select name="WorkFlowHdrID" id="WorkFlowHdrID" required>
          <option value="">Select workflow</option>
          <% workflow.forEach(wf => { %>
            <option value="<%= wf.workFlowID %>"><%= wf.workFlowID %></option>
          <% }) %>
        </select>
      </div>
    <% } %>

    <% if (processSteps && processSteps.length > 0) { %>
      <div class="process-steps">
        <h3><i class="fas fa-list-ol"></i> Process Steps</h3>
        <ol>
          <% processSteps.forEach(step => { %>
            <li><strong>Step <%= step.StepOrder %>:</strong> <%= step.DeptName %></li>
          <% }) %>
        </ol>
      </div>
    <% } %>

    <div class="form-group">
      <label for="TaskName" class="required-field">Task Name</label>
      <input type="text" name="TaskName" id="TaskName" required placeholder="e.g., Review Design Mockups"/>
    </div>

    <div class="form-group">
      <label for="TaskPlanned" class="required-field">Task Description</label>
      <input type="text" name="TaskPlanned" id="TaskPlanned" required placeholder="Describe what needs to be done"/>
    </div>

    <div class="form-group">
      <label for="IsDateFixed">Fixed Deadline?</label>
      <select name="IsDateFixed" id="IsDateFixed">
        <option value="1">Yes</option>
        <option value="0" selected>No</option>
      </select>
    </div>

    <div class="form-group">
      <label for="DaysRequired" class="required-field">Estimated Days</label>
      <input type="number" name="DaysRequired" id="DaysRequired" min="1" required placeholder="3"/>
    </div>

    <% if (isAdmin) { %>
      <div class="form-group">
        <label for="DepId" class="required-field">Responsible Department</label>
        <select name="DepId" id="DepId" required>
          <option value="">Select a department</option>
          <% departments.forEach(d => { %>
            <option value="<%= d.DepartmentID %>" <%= d.DepartmentID === departmentId ? "selected" : "" %>><%= d.DeptName %></option>
          <% }) %>
        </select>
      </div>
    <% } else { %>
      <input type="hidden" name="DepId" value="<%= departmentId %>"/>
    <% } %>

    <div class="form-actions">
      <button type="button" class="btn btn-secondary" onclick="history.back()">
        <i class="fas fa-arrow-left"></i> Cancel
      </button>
      <button type="submit" class="btn btn-primary">
        <i class="fas fa-plus-circle"></i> Create Task
      </button>
    </div>
  </form>
  
  <div id="tasks-container">
    <div class="tasks-header">
      <h2><i class="fas fa-clipboard-list"></i> Current Tasks</h2>
      <button class="refresh-btn" id="refresh-tasks">
        <i class="fas fa-sync-alt"></i> Refresh
      </button>
    </div>
    <div id="tasks-loading" style="text-align: center; padding: 2rem;">
      <div class="spinner" style="width: 2rem; height: 2rem; border-width: 3px; margin: 0 auto;"></div>
      <p>Loading tasks...</p>
    </div>
    <div id="tasks-content" style="display: none;"></div>
  </div>
</div>

<script>
  // Get workflow ID from template or set to null
  const workflowId = <%= workflowDetails ? workflowDetails.workFlowID : 'null' %>;
  let isLoading = false;

  // Load tasks when page loads
  document.addEventListener('DOMContentLoaded', function() {
    if (workflowId) {
      loadTasks();
    } else {
      document.getElementById('tasks-loading').innerHTML = '<p>Select a workflow to view tasks.</p>';
    }
  });

  // Refresh button handler
  document.getElementById('refresh-tasks').addEventListener('click', function() {
    if (!isLoading && workflowId) {
      loadTasks();
    }
  });

  function loadTasks() {
    isLoading = true;
    const loadingEl = document.getElementById('tasks-loading');
    const contentEl = document.getElementById('tasks-content');
    
    loadingEl.style.display = 'block';
    contentEl.style.display = 'none';
    loadingEl.innerHTML = '<div class="spinner" style="width: 2rem; height: 2rem; border-width: 3px; margin: 0 auto;"></div><p>Loading tasks...</p>';
    
    fetch(`/api/tasks?workflowId=${workflowId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        renderTasks(data);
        isLoading = false;
      })
      .catch(error => {
        console.error('Error loading tasks:', error);
        loadingEl.innerHTML = '<p style="color:var(--danger);"><i class="fas fa-exclamation-circle"></i> Error loading tasks. Please try again.</p>';
        isLoading = false;
      });
  }

  function renderTasks(tasks) {
    const contentEl = document.getElementById('tasks-content');
    const loadingEl = document.getElementById('tasks-loading');
    
    if (!tasks || tasks.length === 0) {
      contentEl.innerHTML = '<div class="no-tasks"><i class="fas fa-inbox"></i><p>No tasks found for this workflow.</p></div>';
      loadingEl.style.display = 'none';
      contentEl.style.display = 'block';
      return;
    }

    // Group tasks by department
    const grouped = {};
    tasks.forEach(task => {
      if (!grouped[task.DepId]) {
        grouped[task.DepId] = {
          DeptName: task.DeptName,
          Tasks: []
        };
      }
      grouped[task.DepId].Tasks.push(task);
    });

    // Build HTML
    let html = '';
    for (const depId in grouped) {
      const group = grouped[depId];
      html += `
        <div class="department-group">
          <div class="department-header">
            <i class="fas fa-building"></i>
            <h3>${group.DeptName}</h3>
          </div>
          <div style="overflow-x: auto;">
            <table class="tasks-table">
              <thead>
                <tr>
                  <th>Task Name</th>
                  <th>Description</th>
                  <th>Planned Date</th>
                  <th>Days</th>
                  <th>Status</th>
                  <th>Started</th>
                  <th>Finished</th>
                  <th>Delay</th>
                </tr>
              </thead>
              <tbody>
      `;

      group.Tasks.forEach(task => {
        const status = getTaskStatus(task);
        const statusBadge = getStatusBadge(status);
        
        html += `
          <tr>
            <td>${task.TaskName || '-'}</td>
            <td>${task.TaskPlanned || '-'}</td>
            <td>${task.PlannedDate ? formatDate(task.PlannedDate) : '-'}</td>
            <td>${task.DaysRequired || '-'}</td>
            <td>${statusBadge}</td>
            <td>${task.TimeStarted ? formatDateTime(task.TimeStarted) : '-'}</td>
            <td>${task.TimeFinished ? formatDateTime(task.TimeFinished) : '-'}</td>
            <td>${task.Delay != null ? `${task.Delay} days` : '-'}</td>
          </tr>
        `;
      });

      html += `
              </tbody>
            </table>
          </div>
        </div>
      `;
    }

    contentEl.innerHTML = html;
    loadingEl.style.display = 'none';
    contentEl.style.display = 'block';
  }

  function getTaskStatus(task) {
    if (task.TimeFinished) return 'completed';
    if (task.TimeStarted) return 'in-progress';
    if (task.Delay > 0) return 'delayed';
    return 'pending';
  }

  function getStatusBadge(status) {
    switch(status) {
      case 'completed':
        return '<span class="status-badge status-completed"><i class="fas fa-check-circle"></i> Completed</span>';
      case 'in-progress':
        return '<span class="status-badge status-pending"><i class="fas fa-spinner"></i> In Progress</span>';
      case 'delayed':
        return '<span class="status-badge status-delayed"><i class="fas fa-exclamation-triangle"></i> Delayed</span>';
      default:
        return '<span class="status-badge status-pending"><i class="far fa-clock"></i> Pending</span>';
    }
  }

  function formatDate(dateString) {
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  }

  function formatDateTime(dateString) {
    const options = { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit', 
      minute: '2-digit' 
    };
    return new Date(dateString).toLocaleString(undefined, options);
  }
</script>
</html>