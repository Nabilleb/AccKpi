<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles/workflowDash.css">
    <title>System Engineering Workflow Dashboard</title>
    <style>
        /* Enhanced status badges with icons */
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-transform: capitalize;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        .status-draft {
            background-color: #e0e0e0;
            color: #424242;
        }
        .status-in-progress {
            background-color: #bbdefb;
            color: #1565c0;
        }
        .status-review {
            background-color: #fff0c2;
            color: #ff8f00;
        }
        .status-completed {
            background-color: #c8e6c9;
            color: #2e7d32;
        }
        .status-blocked {
            background-color: #ffcdd2;
            color: #c62828;
        }
        .highlight {
            background-color: #fffde7;
        }
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        .no-results {
            text-align: center;
            padding: 20px;
            color: #757575;
        }
        .table-container {
            position: relative;
            min-height: 300px;
        }
        .clickable {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .clickable:hover {
            background-color: #f5f5f5;
        }
        .filter-active {
            background-color: #e3f2fd;
            border-color: #2196f3;
        }
        
        /* Enhanced filter controls */
        .filters {
            display: flex;
            gap: 16px;
            flex-wrap: wrap;
            padding: 12px 0;
            align-items: center;
        }
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }
        .filter-label {
            font-size: 12px;
            color: #616161;
            font-weight: 500;
        }
        .filter-group select {
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
            min-width: 160px;
        }
        
        /* Enhanced pagination */
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 16px;
            padding: 12px 0;
        }
        .page-info {
            font-size: 14px;
            color: #616161;
        }
        .page-controls {
            display: flex;
            gap: 8px;
        }
        .page-btn {
            padding: 6px 10px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            background: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 32px;
            height: 32px;
        }
        .page-btn:hover:not(:disabled) {
            background: #f5f5f5;
        }
        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .page-btn.active {
            background: #2196f3;
            color: white;
            border-color: #2196f3;
        }
        
        /* Enhanced search box */
        .search-box {
            position: relative;
            min-width: 240px;
        }
        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }
        .search-box input {
            padding: 8px 12px 8px 36px;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
            width: 100%;
        }
        
        /* Enhanced buttons */
        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        .btn-primary {
            background: #2196f3;
            color: white;
            border: 1px solid #2196f3;
        }
        .btn-primary:hover {
            background: #1976d2;
            border-color: #1976d2;
        }
        .btn-outline {
            background: white;
            color: #2196f3;
            border: 1px solid #2196f3;
        }
        .btn-outline:hover {
            background: #e3f2fd;
        }
        
        /* Enhanced table */
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th {
            text-align: left;
            padding: 12px;
            background: #f5f5f5;
            position: relative;
        }
        td {
            padding: 12px;
            border-bottom: 1px solid #e0e0e0;
        }
        .th-inner {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        .sort-icon {
            cursor: pointer;
            opacity: 0.5;
            transition: opacity 0.2s ease;
        }
        .sort-icon:hover {
            opacity: 1;
        }
        .sort-icon.active {
            opacity: 1;
        }
        .sort-icon.asc svg {
            transform: rotate(180deg);
        }
        
        /* Responsive improvements */
        @media (max-width: 768px) {
            .toolbar {
                flex-direction: column;
                gap: 12px;
            }
            .search-box {
                width: 100%;
            }
            .filters {
                flex-direction: column;
                align-items: flex-start;
            }
            .filter-group {
                width: 100%;
            }
            .filter-group select {
                width: 100%;
            }
            .pagination {
                flex-direction: column;
                gap: 12px;
            }
        }
        
        /* Animation for loading */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        table {
            animation: fadeIn 0.3s ease;
        }
        
        /* Badge icons */
        .badge-icon {
            width: 14px;
            height: 14px;
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <div class="header">
            <h1>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 17V19H10V17H3ZM3 5V7H14V5H3ZM14 21V19H21V17H14V15H12V21H14ZM7 9V11H3V13H7V15H9V9H7ZM21 13V11H12V13H21ZM15 9H17V7H21V5H17V3H15V9Z" fill="currentColor"/>
                </svg>
                System Engineering Workflow
            </h1>
            <div class="toolbar">
                <button class="btn btn-primary" id="newItemBtn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" fill="currentColor"/>
                    </svg>
                    Add Workflow
                </button>
                <button class="btn btn-outline" id="exportBtn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M5 20H19V22H5V20ZM12 8C10.3431 8 9 6.65685 9 5C9 3.34315 10.3431 2 12 2C13.6569 2 15 3.34315 15 5C15 6.65685 13.6569 8 12 8ZM12 10C14.2091 10 16 8.20914 16 6C16 3.79086 14.2091 2 12 2C9.79086 2 8 3.79086 8 6C8 8.20914 9.79086 10 12 10ZM6.5 17.5C6.5 14.4624 8.96243 12 12 12C15.0376 12 17.5 14.4624 17.5 17.5H19.5C19.5 13.3579 16.1421 10 12 10C7.85786 10 4.5 13.3579 4.5 17.5H6.5Z" fill="currentColor"/>
                    </svg>
                    Export
                </button>
                <div class="search-box">
                    <span class="search-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M15.5 14H14.71L14.43 13.73C15.41 12.59 16 11.11 16 9.5C16 5.91 13.09 3 9.5 3C5.91 3 3 5.91 3 9.5C3 13.09 5.91 16 9.5 16C11.11 16 12.59 15.41 13.73 14.43L14 14.71V15.5L19 20.49L20.49 19L15.5 14ZM9.5 14C7.01 14 5 11.99 5 9.5C5 7.01 7.01 5 9.5 5C11.99 5 14 7.01 14 9.5C14 11.99 11.99 14 9.5 14Z" fill="currentColor"/>
                        </svg>
                    </span>
                    <input type="text" id="searchInput" placeholder="Search workflow...">
                </div>
                <button class="btn btn-outline" id="resetFiltersBtn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6 13H18V11H6V13ZM3 6V8H21V6H3ZM10 18H14V16H10V18Z" fill="currentColor"/>
                    </svg>
                    Reset Filters
                </button>
            </div>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label class="filter-label">Project</label>
                <select id="projectFilter">
                    <option value="">All Projects</option>
                    <% projects.forEach(project => { %>
                        <option value="<%= project.projectID %>"><%= project.projectName %></option>
                    <% }) %>
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label">Process</label>
                <select id="processFilter">
                    <option value="">All Processes</option>
                    <option value="Requirements Analysis">Requirements Analysis</option>
                    <option value="System Design">System Design</option>
                    <option value="Implementation">Implementation</option>
                    <option value="Testing">Testing</option>
                    <option value="Deployment">Deployment</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">Status</label>
                <select id="statusFilter">
                    <option value="">All Statuses</option>
                    <option value="Draft">Draft</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Review">Review</option>
                    <option value="Completed">Completed</option>
                    <option value="Blocked">Blocked</option>
                </select>
            </div>
        </div>

        <div class="table-container">
            <div class="loading" id="loadingIndicator" style="display: none;">
                <svg width="50" height="50" viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="25" cy="25" r="20" stroke="#e0e0e0" stroke-width="4" fill="none"/>
                    <circle cx="25" cy="25" r="20" stroke="#2196f3" stroke-width="4" fill="none" stroke-dasharray="125.664" stroke-dashoffset="125.664">
                        <animate attributeName="stroke-dashoffset" from="125.664" to="0" dur="1s" repeatCount="indefinite"/>
                    </circle>
                </svg>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>
                            <div class="th-inner">
                                HDR ID
                                <span class="sort-icon" data-sort="HdrID">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                    </svg>
                                </span>
                            </div>
                        </th>
                        <th>
                            <div class="th-inner">
                                Process
                                <span class="sort-icon" data-sort="ProcessName">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                    </svg>
                                </span>
                            </div>
                        </th>
                        <th>
                            <div class="th-inner">
                                Package
                                <span class="sort-icon" data-sort="PackageName">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                    </svg>
                                </span>
                            </div>
                        </th>
                        <th>
                            <div class="th-inner">
                                Project
                                <span class="sort-icon" data-sort="ProjectName">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                    </svg>
                                </span>
                            </div>
                        </th>
                        <th>
                            <div class="th-inner">
                                Status
                                <span class="sort-icon" data-sort="Status">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                    </svg>
                                </span>
                            </div>
                        </th>
                        <th>
                            <div class="th-inner">
                                Completed Date
                                <span class="sort-icon" data-sort="DueDate">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                    </svg>
                                </span>
                            </div>
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="workflowTableBody">
                </tbody>
            </table>

            <div class="no-results" id="noResultsMessage" style="display: none;">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-bottom: 12px;">
                    <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z" fill="#757575"/>
                </svg>
                <p>No workflows match your search criteria.</p>
                <button class="btn btn-outline" onclick="resetFilters()">Reset Filters</button>
            </div>

            <div class="pagination">
                <div class="page-info" id="pageInfo">Showing 0 to 0 of 0 entries</div>
                <div class="page-controls" id="paginationControls">
                </div>
            </div>
        </div>
    </div>

<script>
let allWorkflows = [];
let filteredWorkflows = [];
let currentPage = 1;
const rowsPerPage = 10;
let sortColumn = 'HdrID';
let sortDirection = 'asc';
let debounceTimer;

const searchInput = document.getElementById('searchInput');
const projectFilter = document.getElementById('projectFilter');
const processFilter = document.getElementById('processFilter');
const statusFilter = document.getElementById('statusFilter');
const resetFiltersBtn = document.getElementById('resetFiltersBtn');
const newItemBtn = document.getElementById('newItemBtn');
const exportBtn = document.getElementById('exportBtn');
const workflowTableBody = document.getElementById('workflowTableBody');
const noResultsMessage = document.getElementById('noResultsMessage');
const loadingIndicator = document.getElementById('loadingIndicator');
const pageInfo = document.getElementById('pageInfo');
const paginationControls = document.getElementById('paginationControls');
const usrAdmin = <%= usrAdmin ? 'true' : 'false' %>;

document.addEventListener("DOMContentLoaded", async () => {
    if (!usrAdmin) {
        newItemBtn.style.display = 'none';
    }
    
    await loadWorkflowData();
    setupEventListeners();
    updateTable();
    updatePagination();
});

async function loadWorkflowData() {
    try {
        loadingIndicator.style.display = 'block';
        workflowTableBody.innerHTML = '';
        
        const response = await fetch("/api/workFlowDashData");
        allWorkflows = await response.json();
        
        // Add activate status if not present
        allWorkflows = allWorkflows.map(wf => ({
            ...wf,
            activate: wf.activate !== undefined ? wf.activate : true
        }));
        
        filteredWorkflows = [...allWorkflows];
        loadingIndicator.style.display = 'none';
    } catch (err) {
        console.error("Failed to load workflow dashboard data", err);
        loadingIndicator.style.display = 'none';
        workflowTableBody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; color: #c62828; padding: 24px;">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-bottom: 8px;">
                        <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z" fill="#c62828"/>
                    </svg>
                    <p>Failed to load data. Please try again.</p>
                    <button class="btn btn-outline" onclick="loadWorkflowData()" style="margin-top: 8px;">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4C7.58 4 4 7.58 4 12C4 16.42 7.58 20 12 20C15.73 20 18.84 17.45 19.73 14H17.65C16.83 16.33 14.61 18 12 18C8.69 18 6 15.31 6 12C6 8.69 8.69 6 12 6C13.66 6 15.14 6.69 16.22 7.78L13 11H20V4L17.65 6.35Z" fill="currentColor"/>
                        </svg>
                        Retry
                    </button>
                </td>
            </tr>
        `;
    }
}

function setupEventListeners() {
    // Debounced search input
    searchInput.addEventListener('input', () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(applyFilters, 300);
    });
    
    projectFilter.addEventListener('change', applyFilters);
    processFilter.addEventListener('change', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
    
    resetFiltersBtn.addEventListener('click', resetFilters);
    
    newItemBtn.addEventListener('click', () => {
        window.location.href = '/workflow/new';
    });
    
    exportBtn.addEventListener('click', exportData);
    
    // Enhanced sort icons with visual feedback
    document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.addEventListener('click', (e) => {
            const column = e.currentTarget.getAttribute('data-sort');
            
            // Update all sort icons
            document.querySelectorAll('.sort-icon').forEach(i => {
                i.classList.remove('active', 'asc');
            });
            
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }
            
            // Update current sort icon
            e.currentTarget.classList.add('active');
            if (sortDirection === 'desc') {
                e.currentTarget.classList.add('asc');
            }
            
            updateTable();
            updatePagination();
        });
    });
}

function applyFilters() {
    currentPage = 1;
    
    const searchTerm = searchInput.value.toLowerCase();
    const projectValue = projectFilter.value;
    const processValue = processFilter.value;
    const statusValue = statusFilter.value;
    
    filteredWorkflows = allWorkflows.filter(workflow => {
        const matchesSearch = !searchTerm || 
            (workflow.HdrID && workflow.HdrID.toString().toLowerCase().includes(searchTerm)) ||
            (workflow.ProcessName && workflow.ProcessName.toLowerCase().includes(searchTerm)) ||
            (workflow.PackageName && workflow.PackageName.toLowerCase().includes(searchTerm)) ||
            (workflow.ProjectName && workflow.ProjectName.toLowerCase().includes(searchTerm)) ||
            (workflow.Status && workflow.Status.toLowerCase().includes(searchTerm));
        
        const matchesProject = !projectValue || (workflow.ProjectID && workflow.ProjectID.toString() === projectValue);
        const matchesProcess = !processValue || (workflow.ProcessName === processValue);
        const matchesStatus = !statusValue || (workflow.Status === statusValue);
        
        return matchesSearch && matchesProject && matchesProcess && matchesStatus;
    });
    
    updateTable();
    updatePagination();
}

function resetFilters() {
    searchInput.value = '';
    projectFilter.value = '';
    processFilter.value = '';
    statusFilter.value = '';
    
    applyFilters();
}

function sortWorkflows() {
    filteredWorkflows.sort((a, b) => {
        let valueA = a[sortColumn];
        let valueB = b[sortColumn];
        
        // Handle null/undefined values
        if (valueA === null || valueA === undefined) valueA = '';
        if (valueB === null || valueB === undefined) valueB = '';
        
        // Handle numeric sorting for HdrID
        if (sortColumn === 'HdrID') {
            return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;
        }
        
        // Handle date sorting
        if (sortColumn === 'DueDate' || sortColumn === 'completionDate') {
            const dateA = valueA ? new Date(valueA) : new Date(0);
            const dateB = valueB ? new Date(valueB) : new Date(0);
            return sortDirection === 'asc' ? dateA - dateB : dateB - dateA;
        }
        
        // Default string sorting
        if (sortDirection === 'asc') {
            return String(valueA).localeCompare(String(valueB));
        } else {
            return String(valueB).localeCompare(String(valueA));
        }
    });
}

function updateTable() {
    sortWorkflows();

    // Filter based on activate and usrAdmin
    const activeWorkflows = filteredWorkflows.filter(wf => {
        if (usrAdmin) {
            // Admin sees everything
            return true;
        } else {
            // Non-admin sees only activate = true
            return wf.activate === true;
        }
    });

    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const paginatedWorkflows = activeWorkflows.slice(startIndex, endIndex);

    if (activeWorkflows.length === 0) {
        noResultsMessage.style.display = 'block';
        workflowTableBody.innerHTML = '';
    } else {
        noResultsMessage.style.display = 'none';
        workflowTableBody.innerHTML = paginatedWorkflows.map(workflow => `
            <tr class="clickable" 
                data-hdrid="${workflow.HdrID}"
                data-process="${workflow.ProcessName || ''}"
                data-package="${workflow.PackageName || ''}"
                data-active="${workflow.activate}">
                <td>${workflow.HdrID}</td>
                <td>${workflow.ProcessName || '-'}</td>
                <td>${workflow.PackageName || '-'}</td>
                <td>${workflow.ProjectName || '-'}</td>
                <td>
                    <span class="status-badge status-${workflow.Status ? workflow.Status.toLowerCase().replace(' ', '-') : ''}">
                        ${getStatusIcon(workflow.Status)}
                        ${workflow.Status || '-'}
                    </span>
                </td>
                <td>${workflow.completionDate ? formatDate(workflow.completionDate) : '-'}</td>
                <td>
                    <button class="btn btn-outline btn-sm action-btn" data-action="view" style="padding: 4px 8px;">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 4.5C7 4.5 2.73 7.61 1 12C2.73 16.39 7 19.5 12 19.5C17 19.5 21.27 16.39 23 12C21.27 7.61 17 4.5 12 4.5ZM12 17C9.24 17 7 14.76 7 12C7 9.24 9.24 7 12 7C14.76 7 17 9.24 17 12C17 14.76 14.76 17 12 17ZM12 9C10.34 9 9 10.34 9 12C9 13.66 10.34 15 12 15C13.66 15 15 13.66 15 12C15 10.34 13.66 9 12 9Z" fill="currentColor"/>
                        </svg>
                    </button>
                    ${usrAdmin ? `
                    <button class="btn btn-outline btn-sm action-btn" data-action="edit" style="padding: 4px 8px;">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 17.25V21H6.75L17.81 9.94L14.06 6.19L3 17.25ZM20.71 7.04C21.1 6.65 21.1 6.02 20.71 5.63L18.37 3.29C17.98 2.9 17.35 2.9 16.96 3.29L15.13 5.12L18.88 8.87L20.71 7.04Z" fill="currentColor"/>
                        </svg>
                    </button>
                    ` : ''}
                </td>
            </tr>
        `).join('');

        // Add click handlers to rows and action buttons
        document.querySelectorAll('tr.clickable').forEach(row => {
            // Row click handler
            row.addEventListener('click', (e) => {
                // Don't navigate if clicking on an action button
                if (e.target.closest('.action-btn')) return;
                
                const hdrId = row.getAttribute('data-hdrid');
                const process = row.getAttribute('data-process');
                const packageName = row.getAttribute('data-package');
                const isActive = row.getAttribute('data-active');
                
                if (usrAdmin) {
                    window.location.href = `/add-task?workflowId=${encodeURIComponent(hdrId)}&process=${encodeURIComponent(process)}&package=${encodeURIComponent(packageName)}&active=${isActive}`;
                } else {
                    window.location.href = `/userpage/${hdrId}`;
                }
            });
            
            // Action button handlers
            row.querySelectorAll('.action-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const action = btn.getAttribute('data-action');
                    const hdrId = row.getAttribute('data-hdrid');
                    
                    if (action === 'view') {
                        if (usrAdmin) {
                            window.location.href = `/add-task?workflowId=${encodeURIComponent(hdrId)}`;
                        } else {
                            window.location.href = `/userpage/${hdrId}`;
                        }
                    } else if (action === 'edit') {
                        window.location.href = `/workflow/edit/${hdrId}`;
                    }
                });
            });
        });
    }
}

function getStatusIcon(status) {
    if (!status) return '';
    
    const icons = {
        'Draft': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM6 20V4H13V9H18V20H6Z" fill="currentColor"/></svg>',
        'In Progress': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20Z" fill="currentColor"/><path d="M13 7H11V12.414L15.293 16.707L16.707 15.293L13 11.586V7Z" fill="currentColor"/></svg>',
        'Review': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM7 13H17V11H7V13Z" fill="currentColor"/></svg>',
        'Completed': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z" fill="currentColor"/></svg>',
        'Blocked': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM16 15.59L15.59 16L12 12.41L8.41 16L8 15.59L11.59 12L8 8.41L8.41 8L12 11.59L15.59 8L16 8.41L12.41 12L16 15.59Z" fill="currentColor"/></svg>'
    };
    
    return icons[status] || '';
}

function formatDate(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
}

function updatePagination() {
    const totalPages = Math.ceil(filteredWorkflows.length / rowsPerPage);
    
    // Update page info text
    const startItem = filteredWorkflows.length === 0 ? 0 : (currentPage - 1) * rowsPerPage + 1;
    const endItem = Math.min(currentPage * rowsPerPage, filteredWorkflows.length);
    pageInfo.textContent = `Showing ${startItem} to ${endItem} of ${filteredWorkflows.length} entries`;
    
    // Update pagination buttons
    paginationControls.innerHTML = '';
    
    // Previous button
    const prevButton = document.createElement('button');
    prevButton.className = 'page-btn';
    prevButton.disabled = currentPage === 1;
    prevButton.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/>
        </svg>
    `;
    prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
            updatePagination();
        }
    });
    paginationControls.appendChild(prevButton);
    
    // Page buttons
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    if (startPage > 1) {
        const firstPageButton = document.createElement('button');
        firstPageButton.className = 'page-btn';
        firstPageButton.textContent = '1';
        firstPageButton.addEventListener('click', () => {
            currentPage = 1;
            updateTable();
            updatePagination();
        });
        paginationControls.appendChild(firstPageButton);
        
        if (startPage > 2) {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.style.padding = '0 8px';
            paginationControls.appendChild(ellipsis);
        }
    }
    
    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `page-btn ${i === currentPage ? 'active' : ''}`;
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => {
            currentPage = i;
            updateTable();
            updatePagination();
        });
        paginationControls.appendChild(pageButton);
    }
    
    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.style.padding = '0 8px';
            paginationControls.appendChild(ellipsis);
        }
        
        const lastPageButton = document.createElement('button');
        lastPageButton.className = 'page-btn';
        lastPageButton.textContent = totalPages;
        lastPageButton.addEventListener('click', () => {
            currentPage = totalPages;
            updateTable();
            updatePagination();
        });
        paginationControls.appendChild(lastPageButton);
    }
    
    // Next button
    const nextButton = document.createElement('button');
    nextButton.className = 'page-btn';
    nextButton.disabled = currentPage === totalPages;
    nextButton.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8.59 16.59L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.59Z" fill="currentColor"/>
        </svg>
    `;
    nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            updateTable();
            updatePagination();
        }
    });
    paginationControls.appendChild(nextButton);
}

function exportData() {
    if (filteredWorkflows.length === 0) {
        alert('No data to export');
        return;
    }
    
    const headers = ['HDR ID', 'Process', 'Package', 'Project', 'Status', 'Completed Date'];
    const rows = filteredWorkflows.map(workflow => [
        workflow.HdrID,
        workflow.ProcessName || '',
        workflow.PackageName || '',
        workflow.ProjectName || '',
        workflow.Status || '',
        workflow.completionDate ? formatDate(workflow.completionDate) : ''
    ]);
    
    let csvContent = headers.join(',') + '\n';
    rows.forEach(row => {
        csvContent += row.map(field => `"${field.toString().replace(/"/g, '""')}"`).join(',') + '\n';
    });
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `workflows_export_${new Date().toISOString().slice(0, 10)}.csv`);
    link.style.display = 'none';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
</script>
</body>
</html>