<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Engineering Workflow Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #2563eb;
            --primary-light: #dbeafe;
            --primary-lighter: #eff6ff;
            --primary-dark: #1d4ed8;
            --secondary: #64748b;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #0ea5e9;
            --text: #1e293b;
            --text-light: #64748b;
            --border: #e2e8f0;
            --background: #f8fafc;
            --white: #ffffff;
            --radius-sm: 6px;
            --radius-md: 10px;
            --radius-lg: 16px;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
            --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
            --gradient: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--background);
            color: var(--text);
            line-height: 1.5;
            padding: 1rem;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: var(--white);
            border-radius: var(--radius-md);
            box-shadow: var(--shadow-md);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        h1, h2, h3 {
            color: var(--primary-dark);
            font-weight: 600;
        }

        h1 {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        h1 i {
            color: var(--primary);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text);
            font-size: 0.875rem;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: var(--radius-sm);
            font-size: 0.9375rem;
            transition: var(--transition);
            background-color: var(--white);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.15);
        }

        select.form-control {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 16px 12px;
            padding-right: 2.5rem;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--radius-sm);
            font-size: 0.9375rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            white-space: nowrap;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .btn-secondary {
            background-color: var(--border);
            color: var(--text);
        }

        .btn-secondary:hover {
            background-color: #d1d5db;
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }

        .btn-secondary:active {
            transform: translateY(0);
        }

        .btn i {
            font-size: 0.9em;
        }

        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.35rem 0.75rem;
            border-radius: 999px;
            font-size: 0.85rem;
            font-weight: 600;
            gap: 0.35rem;
        }

        .status-draft {
            background-color: rgba(66, 66, 66, 0.1);
            color: #424242;
        }

        .status-in-progress {
            background-color: rgba(21, 101, 192, 0.1);
            color: #1565c0;
        }

        .status-review {
            background-color: rgba(255, 143, 0, 0.1);
            color: #ff8f00;
        }

        .status-completed {
            background-color: rgba(46, 125, 50, 0.1);
            color: #2e7d32;
        }

        .status-blocked {
            background-color: rgba(198, 40, 40, 0.1);
            color: #c62828;
        }

        .status-pending {
            background-color: rgba(245, 158, 11, 0.1);
            color: var(--warning);
        }

        .alert {
            padding: 1rem;
            border-radius: var(--radius-sm);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 0.9375rem;
        }

        .alert-success {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .alert-danger {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }

        .alert-info {
            background-color: rgba(14, 165, 233, 0.1);
            color: var(--info);
        }

        .dashboard {
            max-width: 1400px;
            margin: 0 auto;
            background-color: var(--white);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            overflow: hidden;
        }

        .header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            background-color: var(--white);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: var(--primary-dark);
            margin: 0;
        }

        .toolbar {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: var(--radius-sm);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            font-size: 0.875rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            border: 1px solid var(--primary);
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            border-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .btn-outline {
            background: white;
            color: var(--primary);
            border: 1px solid var(--primary);
        }

        .btn-outline:hover {
            background: var(--primary-lighter);
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }

        .btn-outline:active {
            transform: translateY(0);
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
        }

        .search-box {
            position: relative;
            flex: 1;
            min-width: 240px;
        }

        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
            color: var(--text-light);
        }

        .search-box input {
            padding: 0.5rem 1rem 0.5rem 2.25rem;
            border-radius: var(--radius-sm);
            border: 1px solid var(--border);
            width: 100%;
            transition: var(--transition);
            font-size: 0.875rem;
        }

        .search-box input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

        .filters {
            display: flex;
            gap: 1rem;
            padding: 1rem 1.5rem;
            background-color: var(--primary-lighter);
            border-bottom: 1px solid var(--border);
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
            min-width: 160px;
        }

        .filter-label {
            font-size: 0.75rem;
            color: var(--text-light);
            font-weight: 500;
        }

        .filter-group select {
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            border: 1px solid var(--border);
            font-size: 0.875rem;
            transition: var(--transition);
            background-color: var(--white);
        }

        .filter-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

        .table-container {
            position: relative;
            min-height: 300px;
            overflow-x: auto;
            background-color: var(--white);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.875rem;
        }

        th {
            text-align: left;
            padding: 0.75rem 1rem;
            background: var(--primary-lighter);
            color: var(--primary-dark);
            font-weight: 500;
            position: sticky;
            top: 0;
            z-index: 10;
            white-space: nowrap;
        }

        td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--border);
            vertical-align: middle;
            white-space: nowrap;
        }

        tr:last-child td {
            border-bottom: none;
        }

        tr:hover td {
            background-color: var(--primary-lighter);
        }

        .th-inner {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .sort-icon {
            color: var(--text-light);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
        }

        .sort-icon:hover {
            color: var(--primary);
        }

        .sort-icon.active {
            color: var(--primary);
        }

        .sort-icon.asc svg {
            transform: rotate(180deg);
        }

        .clickable {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }

        .loading-spinner {
            width: 2.5rem;
            height: 2.5rem;
            border: 3px solid var(--border);
            border-top-color: var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .loading-text {
            color: var(--text-light);
            font-size: 0.875rem;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .no-results {
            text-align: center;
            padding: 2rem;
            color: var(--text-light);
            display: none;
        }

        .no-results-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: var(--text-light);
        }

        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border);
            background-color: var(--white);
        }

        .page-info {
            font-size: 0.875rem;
            color: var(--text-light);
        }

        .page-controls {
            display: flex;
            gap: 0.5rem;
        }

        .page-btn {
            padding: 0.375rem 0.75rem;
            border: 1px solid var(--border);
            border-radius: var(--radius-sm);
            background: var(--white);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 2rem;
            height: 2rem;
            font-size: 0.875rem;
            transition: var(--transition);
        }

        .page-btn:hover:not(:disabled) {
            background: var(--primary-lighter);
            border-color: var(--primary);
        }

        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .badge-icon {
            width: 14px;
            height: 14px;
        }

        .action-btn {
            transition: var(--transition);
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }

        .action-btn:active {
            transform: translateY(0);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--white);
            border-radius: var(--radius-md);
            box-shadow: var(--shadow-lg);
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            animation: fadeIn 0.3s ease;
        }

        .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            color: var(--text-light);
            transition: var(--transition);
        }

        .close-btn:hover {
            color: var(--text);
        }

        .confirmation-text {
            margin-bottom: 1.5rem;
            line-height: 1.6;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background-color: var(--white);
            border-radius: var(--radius-sm);
            padding: 1rem;
            box-shadow: var(--shadow-sm);
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-dark);
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--text-light);
        }

        .progress-container {
            margin-top: 1.5rem;
        }

        .progress-bar {
            height: 8px;
            background-color: var(--border);
            border-radius: 4px;
            overflow: hidden;
            margin-top: 0.5rem;
        }

        .progress-fill {
            height: 100%;
            background-color: var(--primary);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .progress-labels {
            display: flex;
            justify-content: space-between;
            font-size: 0.75rem;
            color: var(--text-light);
        }

        /* Skeleton loading */
        .skeleton {
            background-color: #e2e8f0;
            border-radius: 4px;
            animation: pulse 1.5s infinite ease-in-out;
        }

        .skeleton-text {
            height: 12px;
            width: 100%;
            margin-bottom: 6px;
        }

        .skeleton-badge {
            height: 24px;
            width: 80px;
            border-radius: 999px;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Back button */
        .back-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background-color: var(--white);
            border: 1px solid var(--border);
            border-radius: var(--radius-sm);
            color: var(--text);
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition);
            margin-bottom: 1rem;
        }

        .back-btn:hover {
            background-color: var(--primary-lighter);
            border-color: var(--primary);
            color: var(--primary-dark);
        }

        /* Responsive table */
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        @media (max-width: 768px) {
            body {
                padding: 0.5rem;
            }
            
            .container {
                padding: 1.5rem;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }

            .toolbar {
                flex-direction: column;
                align-items: stretch;
            }

            .search-box {
                min-width: 100%;
            }

            .filters {
                flex-direction: column;
                gap: 0.75rem;
            }

            .filter-group {
                min-width: 100%;
            }

            .pagination {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .page-controls {
                justify-content: center;
            }

            .stats-container {
                grid-template-columns: 1fr;
            }

            /* Responsive table headers */
            table {
                width: 100%;
            }
            
            th, td {
                padding: 0.5rem;
                font-size: 0.8125rem;
            }
            
            .action-btn {
                padding: 0.25rem 0.5rem;
                font-size: 0.75rem;
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        tr {
            animation: fadeIn 0.3s ease forwards;
        }

        /* Enhanced tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: var(--text);
            color: var(--white);
            text-align: center;
            border-radius: var(--radius-sm);
            padding: 0.5rem;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.75rem;
            font-weight: normal;
            box-shadow: var(--shadow-md);
        }

        .tooltip .tooltip-text::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: var(--text) transparent transparent transparent;
        }

        .tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }

        /* Enhanced toast notification */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: var(--text);
            color: var(--white);
            padding: 1rem;
            border-radius: var(--radius-sm);
            box-shadow: var(--shadow-lg);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            z-index: 1000;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
            max-width: 350px;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast-success {
            background-color: var(--success);
        }

        .toast-error {
            background-color: var(--danger);
        }

        .toast-info {
            background-color: var(--info);
        }

        .toast i {
            font-size: 1.25rem;
        }

        /* Floating action button for mobile */
        .fab {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--shadow-lg);
            z-index: 99;
            cursor: pointer;
            transition: var(--transition);
            display: none;
        }

        .fab:hover {
            background-color: var(--primary-dark);
            transform: translateY(-3px);
        }

        .fab:active {
            transform: translateY(0);
        }

        @media (max-width: 768px) {
            .fab {
                display: flex;
            }
        }
    </style>
</head>
<body>
        <% if (usrAdmin) { %>
    <!-- Back button -->
    <a href="/adminpage" class="back-btn">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z" fill="currentColor"/>
        </svg>
        Back to Admin
    </a>
<%}%>
    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toast-message">Operation completed successfully</span>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmationModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Action</h3>
                <button class="close-btn" id="closeModal">&times;</button>
            </div>
            <div class="modal-body">
                <p class="confirmation-text" id="modalText">Are you sure you want to perform this action?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancelAction">Cancel</button>
                <button class="btn btn-primary" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>

    <% if (usrAdmin) { %>
    <div class="container">
        <h1>
            <i class="fas fa-plus-circle"></i>
            Add New Workflow
        </h1>

        <div id="alert-message" class="alert" style="display: none;">
            <i class="fas fa-check-circle"></i>
            <span id="alert-text"></span>
        </div>

        <form id="workflow-form">
            <div class="form-group">
                <label for="process-id">Process</label>
                <select id="process-id" class="form-control" required>
                    <option value="">Select Process</option>
                    <% processes.forEach(process => { %>
                        <option value="<%= process.NumberOfProccessID %>"><%= process.ProcessName %></option>
                    <% }) %>
                </select>
            </div>

            <div class="form-group">
                <label for="project-id">Project</label>
                <select id="project-id" class="form-control" required>
                    <option value="">Select Project</option>
                    <% projects.forEach(project => { %>
                        <option value="<%= project.projectID %>"><%= project.projectName %></option>
                    <% }) %>
                </select>
            </div>

            <div class="form-group">
                <label for="package-id">Package</label>
                <select id="package-id" class="form-control" required>
                    <option value="">Select Package</option>
                    <% packages.forEach(pkg => { %>
                        <option value="<%= pkg.PkgeID %>"><%= pkg.PkgeName %></option>
                    <% }) %>
                </select>
            </div>

            <div class="form-group">
                <label>Status</label>
                <div class="status-badge status-pending">
                    <i class="fas fa-clock"></i>
                    Pending
                </div>
                <input type="hidden" id="status" value="Pending">
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i>
                    Save Workflow
                </button>
                
            </div>
        </form>
    </div>
    <% } %>

    <div class="dashboard">
        <div class="header">
            <div class="header-top">
                <h1>
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 17V19H10V17H3ZM3 5V7H14V5H3ZM14 21V19H21V17H14V15H12V21H14ZM7 9V11H3V13H7V15H9V9H7ZM21 13V11H12V13H21ZM15 9H17V7H21V5H17V3H15V9Z" fill="currentColor"/>
                    </svg>
                    System Engineering Workflow Dashboard
                </h1>
                
                <!-- Floating action button for mobile (hidden on desktop) -->
                <button class="fab" id="mobileAddBtn" title="Add New Workflow">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
            
            <div class="toolbar">
                <div class="search-box">
                    <span class="search-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M15.5 14H14.71L14.43 13.73C15.41 12.59 16 11.11 16 9.5C16 5.91 13.09 3 9.5 3C5.91 3 3 5.91 3 9.5C3 13.09 5.91 16 9.5 16C11.11 16 12.59 15.41 13.73 14.43L14 14.71V15.5L19 20.49L20.49 19L15.5 14ZM9.5 14C7.01 14 5 11.99 5 9.5C5 7.01 7.01 5 9.5 5C11.99 5 14 7.01 14 9.5C14 11.99 11.99 14 9.5 14Z" fill="currentColor"/>
                        </svg>
                    </span>
                    <input type="text" id="searchInput" placeholder="Search workflows..." aria-label="Search workflows">
                </div>
            
                <button class="btn btn-outline" id="exportBtn" title="Export to CSV">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M5 20H19V22H5V20ZM12 8C10.3431 8 9 6.65685 9 5C9 3.34315 10.3431 2 12 2C13.6569 2 15 3.34315 15 5C15 6.65685 13.6569 8 12 8ZM12 10C14.2091 10 16 8.20914 16 6C16 3.79086 14.2091 2 12 2C9.79086 2 8 3.79086 8 6C8 8.20914 9.79086 10 12 10ZM6.5 17.5C6.5 14.4624 8.96243 12 12 12C15.0376 12 17.5 14.4624 17.5 17.5H19.5C19.5 13.3579 16.1421 10 12 10C7.85786 10 4.5 13.3579 4.5 17.5H6.5Z" fill="currentColor"/>
                    </svg>
                    Export
                </button>
                <button class="btn btn-outline" id="resetFiltersBtn" title="Reset all filters">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6 13H18V11H6V13ZM3 6V8H21V6H3ZM10 18H14V16H10V18Z" fill="currentColor"/>
                    </svg>
                    Reset
                </button>

                <button class="btn btn-outline" id="logoutBtn" title="Logout" onclick="window.location.href='/logout'">
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M16 17L21 12L16 7V10H9V14H16V17ZM5 19H13V21H5C3.9 21 3 20.1 3 19V5C3 3.9 3.9 3 5 3H13V5H5V19Z" fill="currentColor"/>
  </svg>
  Logout
</button>

            </div>
        </div>

        <div class="stats-container" id="statsContainer">
            <!-- Stats will be populated by JavaScript -->
        </div>

        <div class="filters">
            <div class="filter-group">
                <label class="filter-label" for="projectFilter">Project</label>
                <select id="projectFilter" aria-label="Filter by project">
                    <option value="">All Projects</option>
                    <% projects.forEach(project => { %>
                        <option value="<%= project.projectID %>"><%= project.projectName %></option>
                    <% }) %>
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label" for="processFilter">Process</label>
                <select id="processFilter" aria-label="Filter by process">
                    <option value="">All Processes</option>
                    <option value="Requirements Analysis">Requirements Analysis</option>
                    <option value="System Design">System Design</option>
                    <option value="Implementation">Implementation</option>
                    <option value="Testing">Testing</option>
                    <option value="Deployment">Deployment</option>
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label" for="statusFilter">Status</label>
                <select id="statusFilter" aria-label="Filter by status">
                    <option value="">All Statuses</option>
                    <option value="Draft">Draft</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Review">Review</option>
                    <option value="Completed">Completed</option>
                    <option value="Blocked">Blocked</option>
                </select>
            </div>
        </div>

        <div class="table-responsive">
            <div class="table-container">
                <div class="loading" id="loadingIndicator">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">Loading workflows...</div>
                </div>

                <table>
                    <thead>
                        <tr>
                            <th>
                                <div class="th-inner">
                                    Workflow ID
                                    <span class="sort-icon" data-sort="HdrID" title="Sort by Workflow ID">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
                            <th>
                                <div class="th-inner">
                                    Process
                                    <span class="sort-icon" data-sort="ProcessName" title="Sort by Process">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
                            <th>
                                <div class="th-inner">
                                    Package
                                    <span class="sort-icon" data-sort="PackageName" title="Sort by Package">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
                            <th>
                                <div class="th-inner">
                                    Project
                                    <span class="sort-icon" data-sort="ProjectName" title="Sort by Project">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
                            <th>
                                <div class="th-inner">
                                    Status
                                    <span class="sort-icon" data-sort="Status" title="Sort by Status">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
                            <th>
                                <div class="th-inner">
                                    Created Date
                                    <span class="sort-icon" data-sort="createdDate" title="Sort by Created Date">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
  
                            <th>
                                <div class="th-inner">
                                    Start Date
                                    <span class="sort-icon" data-sort="startDate" title="Sort by Start Date">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>

                            <th>
                                <div class="th-inner">
                                    Finished Date
                                    <span class="sort-icon" data-sort="completionDate" title="Sort by Finished Date">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>

                                <th>
                                <div class="th-inner">
                                    Days Taken
                                    <span class="sort-icon" data-sort="startDate" title="Sort by Start Date">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10L12 15L17 10H7Z" fill="currentColor"/>
                                        </svg>
                                    </span>
                                </div>
                            </th>
                          
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="workflowTableBody">
                        <!-- Table content will be populated by JavaScript -->
                    </tbody>
                </table>

                <div class="no-results" id="noResultsMessage">
                    <div class="no-results-icon">
                        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z" fill="currentColor"/>
                        </svg>
                    </div>
                    <p>No workflows match your search criteria</p>
                    <button class="btn btn-outline" id="resetNoResultsBtn">Reset Filters</button>
                </div>
            </div>
        </div>

        <div class="pagination">
            <div class="page-info" id="pageInfo">Showing 0 to 0 of 0 entries</div>
            <div class="page-controls" id="paginationControls">
                <!-- Pagination buttons will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Floating action button for mobile -->
    <button class="fab" id="mobileAddBtnBottom" title="Add New Workflow" style="display: none;">
        <i class="fas fa-plus"></i>
    </button>

<script>
// Global variables
let allWorkflows = [];
let filteredWorkflows = [];
let currentPage = 1;
const rowsPerPage = 10;
let sortColumn = 'HdrID';
let sortDirection = 'asc';
let debounceTimer;
let pendingAction = null;

// DOM elements
const searchInput = document.getElementById('searchInput');
const projectFilter = document.getElementById('projectFilter');
const processFilter = document.getElementById('processFilter');
const statusFilter = document.getElementById('statusFilter');
const resetFiltersBtn = document.getElementById('resetFiltersBtn');
const resetNoResultsBtn = document.getElementById('resetNoResultsBtn');
const exportBtn = document.getElementById('exportBtn');
const workflowTableBody = document.getElementById('workflowTableBody');
const noResultsMessage = document.getElementById('noResultsMessage');
const loadingIndicator = document.getElementById('loadingIndicator');
const pageInfo = document.getElementById('pageInfo');
const paginationControls = document.getElementById('paginationControls');
const statsContainer = document.getElementById('statsContainer');
const toast = document.getElementById('toast');
const toastMessage = document.getElementById('toast-message');
const confirmationModal = document.getElementById('confirmationModal');
const closeModal = document.getElementById('closeModal');
const cancelAction = document.getElementById('cancelAction');
const confirmAction = document.getElementById('confirmAction');
const modalText = document.getElementById('modalText');
const form = document.getElementById('workflow-form');
const alertMessage = document.getElementById('alert-message');
const alertText = document.getElementById('alert-text');
const mobileAddBtn = document.getElementById('mobileAddBtn');
const mobileAddBtnBottom = document.getElementById('mobileAddBtnBottom');

// Initialize the dashboard
document.addEventListener("DOMContentLoaded", async () => {
    await loadWorkflowData();
    setupEventListeners();
    updateStats();
    updateTable();
    updatePagination();
    
    // Show/hide mobile add button based on screen size
    toggleMobileAddButton();
    window.addEventListener('resize', toggleMobileAddButton);
});

// Toggle mobile add button visibility
function toggleMobileAddButton() {
    if (window.innerWidth <= 768) {
        mobileAddBtn.style.display = 'flex';
        mobileAddBtnBottom.style.display = 'flex';
    } else {
        mobileAddBtn.style.display = 'none';
        mobileAddBtnBottom.style.display = 'none';
    }
}

// Load workflow data from API
async function loadWorkflowData() {
    try {
        showLoading();
        
        // Show skeleton loading
        showSkeletonLoading();
        
        const response = await fetch("/api/workFlowDashData");
        if (!response.ok) throw new Error("Failed to fetch data");
        allWorkflows = await response.json();
        console.log("Loaded workflows:", allWorkflows);
        filteredWorkflows = [...allWorkflows];
        
        hideLoading();
    } catch (err) {
        console.error("Failed to load workflow dashboard data", err);
        hideLoading();
        showError("Failed to load data. Please try again.");
    }
}

// Show skeleton loading while data is being fetched
function showSkeletonLoading() {
    const skeletonRows = Array(5).fill().map(() => `
        <tr>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-badge"></div></td>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-text"></div></td>
            <td><div class="skeleton skeleton-text" style="width: 60px;"></div></td>
        </tr>
    `).join('');
    
    workflowTableBody.innerHTML = skeletonRows;
}

// Calculate and display statistics
function updateStats() {
    if (!allWorkflows.length) return;

    const totalWorkflows = allWorkflows.length;
    const completedCount = allWorkflows.filter(w => w.Status === 'Completed').length;
    const inProgressCount = allWorkflows.filter(w => w.Status === 'In Progress').length;
    const reviewCount = allWorkflows.filter(w => w.Status === 'Review').length;
    const blockedCount = allWorkflows.filter(w => w.Status === 'Blocked').length;
    const completionRate = totalWorkflows > 0 ? Math.round((completedCount / totalWorkflows) * 100) : 0;

    statsContainer.innerHTML = `
        <div class="stat-card">
            <div class="stat-value">${totalWorkflows}</div>
            <div class="stat-label">Total Workflows</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${completedCount}</div>
            <div class="stat-label">Completed</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${inProgressCount}</div>
            <div class="stat-label">In Progress</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${blockedCount}</div>
            <div class="stat-label">Blocked</div>
        </div>
        <div class="stat-card">
            <div class="progress-container">
                <div class="stat-value">${completionRate}%</div>
                <div class="stat-label">Completion Rate</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${completionRate}%"></div>
                </div>
                <div class="progress-labels">
                    <span>0%</span>
                    <span>100%</span>
                </div>
            </div>
        </div>
    `;
}

// Set up event listeners
function setupEventListeners() {
    // Search input with debounce
    searchInput.addEventListener('input', () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            applyFilters();
            updateStats();
        }, 300);
    });
    
    // Filter dropdowns
    projectFilter.addEventListener('change', () => {
        applyFilters();
        updateStats();
    });
    processFilter.addEventListener('change', () => {
        applyFilters();
        updateStats();
    });
    statusFilter.addEventListener('change', () => {
        applyFilters();
        updateStats();
    });
    
    // Reset filters button
    resetFiltersBtn.addEventListener('click', resetFilters);
    resetNoResultsBtn.addEventListener('click', resetFilters);
    
    // Mobile add buttons
    mobileAddBtn.addEventListener('click', () => {
        window.location.href = '/workflow/new';
    });
    mobileAddBtnBottom.addEventListener('click', () => {
        window.location.href = '/workflow/new';
    });
    
    // Export button
    exportBtn.addEventListener('click', () => {
        showConfirmation(
            "Export Workflows",
            "Are you sure you want to export the current filtered workflows to CSV?",
            exportData
        );
    });
    
    // Sort icons
    document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.addEventListener('click', (e) => {
            const column = e.currentTarget.getAttribute('data-sort');
            
            // Reset all sort icons
            document.querySelectorAll('.sort-icon').forEach(i => {
                i.classList.remove('active', 'asc');
            });
            
            // Toggle sort direction if same column
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }
            
            // Update current sort icon
            e.currentTarget.classList.add('active');
            if (sortDirection === 'desc') {
                e.currentTarget.classList.add('asc');
            }
            
            updateTable();
            updatePagination();
        });
    });

    // Modal controls
    closeModal.addEventListener('click', hideModal);
    cancelAction.addEventListener('click', hideModal);
    confirmAction.addEventListener('click', () => {
        if (pendingAction) {
            pendingAction();
            pendingAction = null;
        }
        hideModal();
    });

    // Form submission
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            const processId = document.getElementById('process-id').value;
            const projectId = document.getElementById('project-id').value;
            const packageId = document.getElementById('package-id').value;
            const status = document.getElementById('status').value;

            try {
                showLoading();
                const res = await fetch('/api/workflows', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        processID: processId,
                        projectID: projectId,
                        packageID: packageId,
                        status
                    })
                });

                if (!res.ok) throw new Error('Server error');

                showToast('Workflow added successfully!', 'success');
                form.reset();
                
                // Refresh the data
                await loadWorkflowData();
                updateStats();
                updateTable();
                updatePagination();
            } catch (error) {
                console.error('Error adding workflow:', error);
                showToast('Error adding workflow: ' + error.message, 'error');
                form.reset();
                
                // Refresh the data
                await loadWorkflowData();
                updateStats();
                updateTable();
                updatePagination();
            } finally {
                hideLoading();
            }
        });
    }
}

// Show confirmation modal
function showConfirmation(title, text, action) {
    document.querySelector('.modal-header h3').textContent = title;
    modalText.textContent = text;
    pendingAction = action;
    confirmationModal.style.display = 'flex';
}

// Hide modal
function hideModal() {
    confirmationModal.style.display = 'none';
}

// Show toast notification
function showToast(message, type = 'success') {
    toast.className = `toast toast-${type}`;
    toastMessage.textContent = message;
    toast.classList.add('show');
    
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

// Apply all filters
function applyFilters() {
    currentPage = 1;
    
    const searchTerm = searchInput.value.toLowerCase();
    const projectValue = projectFilter.value;
    const processValue = processFilter.value;
    const statusValue = statusFilter.value;
    
    filteredWorkflows = allWorkflows.filter(workflow => {
        const matchesSearch = !searchTerm || 
            (workflow.HdrID && workflow.HdrID.toString().toLowerCase().includes(searchTerm)) ||
            (workflow.ProcessName && workflow.ProcessName.toLowerCase().includes(searchTerm)) ||
            (workflow.PackageName && workflow.PackageName.toLowerCase().includes(searchTerm)) ||
            (workflow.ProjectName && workflow.ProjectName.toLowerCase().includes(searchTerm)) ||
            (workflow.Status && workflow.Status.toLowerCase().includes(searchTerm));
        
        const matchesProject = !projectValue || (workflow.ProjectID && workflow.ProjectID.toString() === projectValue);
        const matchesProcess = !processValue || (workflow.ProcessName === processValue);
        const matchesStatus = !statusValue || (workflow.Status === statusValue);
        
        return matchesSearch && matchesProject && matchesProcess && matchesStatus;
    });
    
    updateTable();
    updatePagination();
}

// Reset all filters
function resetFilters() {
    searchInput.value = '';
    projectFilter.value = '';
    processFilter.value = '';
    statusFilter.value = '';
    
    applyFilters();
    updateStats();
}

// Sort workflows based on current sort column and direction
function sortWorkflows() {
    filteredWorkflows.sort((a, b) => {
        let valueA = a[sortColumn];
        let valueB = b[sortColumn];
        
        // Handle null/undefined values
        if (valueA === null || valueA === undefined) valueA = '';
        if (valueB === null || valueB === undefined) valueB = '';
        
        // Numeric sorting for HdrID
        if (sortColumn === 'HdrID') {
            return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;
        }
        
        // Date sorting for date fields
        if (sortColumn.includes('Date')) {
            const dateA = valueA ? new Date(valueA) : new Date(0);
            const dateB = valueB ? new Date(valueB) : new Date(0);
            return sortDirection === 'asc' ? dateA - dateB : dateB - dateA;
        }
        
        // Default string sorting
        return sortDirection === 'asc' 
            ? String(valueA).localeCompare(String(valueB))
            : String(valueB).localeCompare(String(valueA));
    });
}

function formatDate(dateStr) {
    if (!dateStr) return '-';
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-GB', {
        day: '2-digit',
        month: 'short',
        year: 'numeric'
    });
}

// Update the table with filtered and sorted data
function updateTable() {
    sortWorkflows();
    
    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const paginatedWorkflows = filteredWorkflows.slice(startIndex, endIndex);
    
    if (filteredWorkflows.length === 0) {
        noResultsMessage.style.display = 'block';
        workflowTableBody.innerHTML = '';
    } else {
        noResultsMessage.style.display = 'none';
        workflowTableBody.innerHTML = paginatedWorkflows.map(workflow => `
            <tr class="clickable" data-hdrid="${workflow.HdrID}">
                <td>${workflow.HdrID || '-'}</td>
                <td>${workflow.ProcessName || '-'}</td>
                <td>${workflow.PackageName || '-'}</td>
                <td>${workflow.ProjectName || '-'}</td>
                <td>
                    <span class="status-badge status-${workflow.Status ? workflow.Status.toLowerCase().replace(' ', '-') : ''}">
                        ${getStatusIcon(workflow.Status)}
                        ${workflow.Status || '-'}
                    </span>
                </td>
                <td>${formatDate(workflow.createdDate)}</td>
                <td>${formatDate(workflow.startDate)}</td>
                <td>${formatDate(workflow.completionDate)}</td>
                <td>${workflow.DaysDone || '-'}</td>
                <td>
                    <button class="btn btn-outline btn-sm action-btn" data-action="view" title="View details">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 4.5C7 4.5 2.73 7.61 1 12C2.73 16.39 7 19.5 12 19.5C17 19.5 21.27 16.39 23 12C21.27 7.61 17 4.5 12 4.5ZM12 17C9.24 17 7 14.76 7 12C7 9.24 9.24 7 12 7C14.76 7 17 9.24 17 12C17 14.76 14.76 17 12 17ZM12 9C10.34 9 9 10.34 9 12C9 13.66 10.34 15 12 15C13.66 15 15 13.66 15 12C15 10.34 13.66 9 12 9Z" fill="currentColor"/>
                        </svg>
                        View
                    </button>
                </td>
            </tr>
        `).join('');
        
        // Add click handlers to rows
        document.querySelectorAll('tr.clickable').forEach(row => {
            row.addEventListener('click', (e) => {
                // Don't navigate if clicking on an action button
                if (e.target.closest('.action-btn')) return;
                
                const hdrId = row.getAttribute('data-hdrid');
                window.location.href = `/userpage/${hdrId}`;
            });
        });
        
        // Add click handlers to action buttons
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const action = btn.getAttribute('data-action');
                const hdrId = btn.closest('tr').getAttribute('data-hdrid');
                
                if (action === 'view') {
                    window.location.href = `/userpage/${hdrId}`;
                }
            });
        });
    }
}

// Get appropriate icon for status badge
function getStatusIcon(status) {
    if (!status) return '';
    
    const icons = {
        'Draft': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM6 20V4H13V9H18V20H6Z" fill="currentColor"/></svg>',
        'In Progress': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20Z" fill="currentColor"/><path d="M13 7H11V12.414L15.293 16.707L16.707 15.293L13 11.586V7Z" fill="currentColor"/></svg>',
        'Review': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM7 13H17V11H7V13Z" fill="currentColor"/></svg>',
        'Completed': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z" fill="currentColor"/></svg>',
        'Blocked': '<svg class="badge-icon" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM16 15.59L15.59 16L12 12.41L8.41 16L8 15.59L11.59 12L8 8.41L8.41 8L12 11.59L15.59 8L16 8.41L12.41 12L16 15.59Z" fill="currentColor"/></svg>'
    };
    
    return icons[status] || '';
}

// Update pagination controls
function updatePagination() {
    const totalPages = Math.ceil(filteredWorkflows.length / rowsPerPage);
    
    // Update page info text
    const startItem = filteredWorkflows.length === 0 ? 0 : (currentPage - 1) * rowsPerPage + 1;
    const endItem = Math.min(currentPage * rowsPerPage, filteredWorkflows.length);
    pageInfo.textContent = `Showing ${startItem} to ${endItem} of ${filteredWorkflows.length} entries`;
    
    // Clear existing pagination controls
    paginationControls.innerHTML = '';
    
    // Previous button
    const prevButton = document.createElement('button');
    prevButton.className = 'page-btn';
    prevButton.disabled = currentPage === 1;
    prevButton.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/>
        </svg>
    `;
    prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
            updatePagination();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    });
    paginationControls.appendChild(prevButton);
    
    // Page number buttons
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Adjust if we don't have enough pages
    if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    // First page and ellipsis if needed
    if (startPage > 1) {
        const firstPageButton = document.createElement('button');
        firstPageButton.className = 'page-btn';
        firstPageButton.textContent = '1';
        firstPageButton.addEventListener('click', () => {
            currentPage = 1;
            updateTable();
            updatePagination();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
        paginationControls.appendChild(firstPageButton);
        
        if (startPage > 2) {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.style.padding = '0 8px';
            ellipsis.style.display = 'flex';
            ellipsis.style.alignItems = 'center';
            paginationControls.appendChild(ellipsis);
        }
    }
    
    // Page number buttons
    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `page-btn ${i === currentPage ? 'active' : ''}`;
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => {
            currentPage = i;
            updateTable();
            updatePagination();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
        paginationControls.appendChild(pageButton);
    }
    
    // Last page and ellipsis if needed
    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.style.padding = '0 8px';
            ellipsis.style.display = 'flex';
            ellipsis.style.alignItems = 'center';
            paginationControls.appendChild(ellipsis);
        }
        
        const lastPageButton = document.createElement('button');
        lastPageButton.className = 'page-btn';
        lastPageButton.textContent = totalPages;
        lastPageButton.addEventListener('click', () => {
            currentPage = totalPages;
            updateTable();
            updatePagination();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
        paginationControls.appendChild(lastPageButton);
    }
    
    // Next button
    const nextButton = document.createElement('button');
    nextButton.className = 'page-btn';
    nextButton.disabled = currentPage === totalPages;
    nextButton.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8.59 16.59L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.59Z" fill="currentColor"/>
        </svg>
    `;
    nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            updateTable();
            updatePagination();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    });
    paginationControls.appendChild(nextButton);
}

// Export data to CSV
function exportData() {
    if (filteredWorkflows.length === 0) {
        showToast('No data to export', 'error');
        return;
    }
    
    // Define CSV headers
    const headers = ['HDR ID', 'Process', 'Package', 'Project', 'Status', 'Created Date', 'Start Date', 'Finished Date'];
    
    // Create CSV rows
    const rows = filteredWorkflows.map(workflow => [
        workflow.HdrID,
        workflow.ProcessName || '',
        workflow.PackageName || '',
        workflow.ProjectName || '',
        workflow.Status || '',
        workflow.createdDate || '',
        workflow.startDate || '',
        workflow.completionDate || ''
    ]);
    
    // Create CSV content
    let csvContent = headers.join(',') + '\n';
    rows.forEach(row => {
        csvContent += row.map(field => `"${field.toString().replace(/"/g, '""')}"`).join(',') + '\n';
    });
    
    // Create download link
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `workflows_export_${new Date().toISOString().slice(0, 10)}.csv`);
    link.style.display = 'none';
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showToast('Export completed successfully', 'success');
}

// Show loading indicator
function showLoading() {
    loadingIndicator.style.display = 'flex';
    noResultsMessage.style.display = 'none';
}

// Hide loading indicator
function hideLoading() {
    loadingIndicator.style.display = 'none';
}

// Show error message
function showError(message) {
    workflowTableBody.innerHTML = `
        <tr>
            <td colspan="9" style="text-align: center; padding: 2rem; color: var(--danger);">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-bottom: 0.5rem;">
                    <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z" fill="currentColor"/>
                </svg>
                <p>${message}</p>
                <button class="btn btn-outline" onclick="loadWorkflowData()" style="margin-top: 0.5rem;">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4C7.58 4 4 7.58 4 12C4 16.42 7.58 20 12 20C15.73 20 18.84 17.45 19.73 14H17.65C16.83 16.33 14.61 18 12 18C8.69 18 6 15.31 6 12C6 8.69 8.69 6 12 6C13.66 6 15.14 6.69 16.22 7.78L13 11H20V4L17.65 6.35Z" fill="currentColor"/>
                    </svg>
                    Retry
                </button>
            </td>
        </tr>
    `;
}
</script>
</body>
</html>