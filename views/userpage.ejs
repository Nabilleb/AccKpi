<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Tasks | Engineering System</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/styles/userpage.css">

</head>
<body>
  <header class="dashboard-header">
    <div class="header-left">
      <img src="/images/accNewLog.webp" alt="Company Logo" class="logo">
      <h1>Task Management</h1>
      <p id="projectName">project name</p>
      <p id="packageName">package name</p>
     <select name="project" id="project">
  <option value="none">none</option>
  <% projects.forEach(project => { %>
    <option value="<%= project.projectID %>"><%= project.projectName %></option>
  <% }) %>
</select>

    </div>
    <div class="user-info">
      <div class="user-avatar">RK</div>
      <div>
        <p><%=usrDesc %></p>
        <small><%=department %> Department</small>
      </div>
      <button class="logout-btn"> <a href="/logout">Logout</a></button>
    </div>
  </header>

  <main class="main-content">
    <section class="process-selection">
      <h2 class="section-title">
        <i class="fas fa-project-diagram"></i>
        Select Process
      </h2>
    <div class="process-grid">
  <% processes.forEach(process => { %>
    <div class="process-card"  data-process-id="<%= process.NumberOfProccessID %>">
      <h3 class="process-name"><%= process.ProcessName %></h3>
      <p class="process-desc"><%= process.processDesc %></p>
    </div>
  <% }) %>
</div>
    </section>

<section class="tasks-section">
  <h2 class="section-title">
    <i class="fas fa-tasks"></i>
    My Tasks
  </h2>
  <table class="tasks-table">
    <thead>
      <tr>
        <th>Task Name</th>
        <th>Task Description</th>
        <th>Planned Date</th>
        <th>Date Finished</th>
        <th>Status</th>
        <th>Days Delay</th>
        <th>Delay Reason</th>
      </tr>
    </thead>
    <tbody>
   
    
    </tbody>
  </table>


</section>


  </main>

<script>
  const userId = "<%= userId %>";
const deptId = "<%= departmentID %>";
const tbody = document.querySelector('.tasks-table tbody');
let activeProcessId = null;

async function refreshTasks() {
  if (!activeProcessId) return;
  const res = await fetch(`/process/${activeProcessId}/tasks?userId=${userId}`);
  const tasks = await res.json();
  renderTasks(tasks);
  createAddTaskButton(activeProcessId);
}


function renderTasks(tasks) {
  const tbody = document.querySelector('.tasks-table tbody');
  if (!tbody) return;

  tbody.innerHTML = '';

  // ðŸ”´ Handle error object
  if (tasks.error) {
    const row = document.createElement('tr');
    row.innerHTML = `<td colspan="8" style="color: red; text-align: center;">${tasks.error}</td>`;
    tbody.appendChild(row);
    return;
  }

  // ðŸ”µ Handle empty task list
  if (tasks.length === 0) {
    const row = document.createElement('tr');
    row.innerHTML = `<td colspan="8" style="text-align: center;">No tasks found for this process.</td>`;
    tbody.appendChild(row);
    return;
  }

  // âœ… Render tasks as usual
  tasks.forEach(task => {
    const tr = document.createElement('tr');

    let status = '';
    if (!task.TimeFinished && task.IsTaskSelected) {
      status = `<span class="status-badge status-pending">Pending</span>`;
    } else if (task.TimeFinished && task.Delay > 0) {
      status = `<span class="status-badge status-overdue">Overdue</span>`;
    } else if (task.TimeFinished) {
      status = `<span class="status-badge status-completed">Completed</span>`;
    }

    const plannedDate = task.PlannedDate ? task.PlannedDate.split('T')[0] : '';
    const finishDate = task.TimeFinished ? task.TimeFinished.split('T')[0] : '';
    const delayReason = task.DelayReason || '';
    const delayByUser = task.LastUpdatedBy ? ` (by User ${task.LastUpdatedBy})` : '';

    const plannedDateCell = task.isDateFixed
      ? `<td>${plannedDate}</td>`
      : `<td><input type="date" value="${plannedDate}" data-task-id="${task.TaskID}" class="editable-date"></td>`;

    let actionButton = '';
    if (task.isTaskSelected) {
      if (!task.TimeStarted) {
        actionButton = `<button class="task-start-btn" data-task-id="${task.TaskID}">Start</button>`;
      } else if (!task.TimeFinished) {
        actionButton = `<button class="task-finish-btn" data-task-id="${task.TaskID}">Finish</button>`;
      }
    }

    tr.innerHTML = `
      <td>${task.TaskName || ''}</td>
      <td>${task.TaskPlanned || ''}</td>
      ${plannedDateCell}
      <td>${finishDate}</td>
      <td>${status}</td>
      <td>${task.Delay !== null ? task.Delay : 0}</td>
      <td>
        <input type="text" value="${delayReason}" class="delay-reason-input" data-task-id="${task.TaskID}">
        <br><small>${delayByUser}</small>
      </td>
      <td>
        ${actionButton}
        <button class="row-save-btn" data-task-id="${task.TaskID}">Save</button>
      </td>
    `;

    tbody.appendChild(tr);
  });
}


function createAddTaskButton(processId) {
  let existingBtn = document.querySelector('.add-task-btn');
  if (existingBtn) existingBtn.remove();

  const button = document.createElement('button');
  button.textContent = "âž• Add Task";
  button.className = 'add-task-btn';
  button.style.marginBottom = '10px';
  button.onclick = () => {
    window.location.href = `/add-task?processId=${processId}`; 
  };

  document.querySelector('.tasks-section').insertBefore(button, document.querySelector('.tasks-table'));
}

document.querySelectorAll('.process-card').forEach(card => {
  card.addEventListener('click', async function () {
    const processId = this.dataset.processId;
    if (activeProcessId === processId) return;

    activeProcessId = processId;
    document.querySelectorAll('.process-card').forEach(c => c.classList.remove('active'));
    this.classList.add('active');

    try {
      const res = await fetch(`/process/${processId}/tasks?userId=${userId}`);
      const tasks = await res.json();
      renderTasks(tasks);
      createAddTaskButton(processId);

    } catch (err) {
      console.error("Network error:", err);
      document.querySelector('.tasks-table tbody').innerHTML = `
        <tr><td colspan="7" style="color: red; text-align: center;">Error loading tasks</td></tr>
      `;
      document.querySelector('.add-task-btn')?.remove();
    }
  });
});

tbody.addEventListener('click', async (e) => {
  if (e.target.classList.contains('row-save-btn')) {
    const taskId = e.target.dataset.taskId;
    const row = e.target.closest('tr');
    const delayInput = row.querySelector('.delay-reason-input');
    const dateInput = row.querySelector('.editable-date');

    const updates = [];

    if (delayInput) {
      updates.push({
        taskId,
        field: 'delayReason',
        value: delayInput.value,
        usrID: userId
      });
    }

    if (dateInput) {
      updates.push({
        taskId,
        field: 'plannedDate',
        value: dateInput.value,
        usrID: userId
      });
    }

    try {
      const res = await fetch('/save-task-updates', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ updates })
      });

      const data = await res.json();
      if (res.ok) {
        alert('Row saved successfully');
      } else {
        alert(`Error: ${data.error}`);
      }
    } catch (err) {
      console.error('Row save error:', err);
      alert('Failed to save row');
    }
  }
});

document.getElementById('project').addEventListener('change', async function () {
  const selectedProjectId = this.value;
  activeProcessId = null; // Reset active process
  tbody.innerHTML = ''; // Clear task table
  const addBtn = document.querySelector('.add-task-btn');
  const pkName = document.querySelector("#packageName");
  const proName = document.querySelector("#projectName")
  if (addBtn) addBtn.remove(); // Remove old button

  if (selectedProjectId !== 'none') {
    try {
      const response = await fetch('/get-project-processes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ projectId: selectedProjectId, departmentId: deptId }),
      });

      const data = await response.json();
      console.log('Processes for selected project:', data);
      
      if (data.length > 0) {
  pkName.textContent = data[0].PkgeName || 'N/A';
  proName.textContent = data[0].ProjectName || 'N/A';
}

      const processGrid = document.querySelector('.process-grid');
      processGrid.innerHTML = '';

      if (data.length === 0) {
        processGrid.innerHTML = '<p>No processes found for this project.</p>';
        return;
      }

      data.forEach(process => {
        const div = document.createElement('div');
        div.classList.add('process-card');
        div.dataset.processId = process.NumberOfProccessID || process.ProcessID || process.processID;

        div.innerHTML = `
          <h3 class="process-name">${process.ProcessName || ''}</h3>
          <p class="process-desc">${process.processDesc || ''}</p>
        `;

        div.addEventListener('click', async function () {
          const processId = this.dataset.processId;
          if (activeProcessId === processId) return;

          activeProcessId = processId;
          document.querySelectorAll('.process-card').forEach(c => c.classList.remove('active'));
          this.classList.add('active');

          const res = await fetch(`/process/${processId}/tasks?userId=${userId}`);
          const tasks = await res.json();
console.log("this is what im getting ", tasks)
          renderTasks(tasks);
          createAddTaskButton(processId);
        });

        processGrid.appendChild(div);
      });

    } catch (error) {
      console.error('Error fetching project data:', error);
    }
  }
});

tbody.addEventListener('click', async (e) => {
  if (e.target.classList.contains('task-start-btn')) {
    const taskId = e.target.dataset.taskId;
    const now = new Date().toISOString();

    await fetch(`/start-task/${taskId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ startTime: now })
    });

    refreshTasks(); // Re-fetch and render tasks
  }

  if (e.target.classList.contains('task-finish-btn')) {
    const taskId = e.target.dataset.taskId;
    const now = new Date().toISOString();

    await fetch(`/finish-task/${taskId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ finishTime: now })
    });

    refreshTasks(); // Re-fetch and render tasks
  }
});



</script>




</body>
</html>