<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Engineering Task Management | My Tasks</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #005bab;
      --primary-dark: #003f7f;
      --primary-light: #e6f0ff;
      --accent: #007acc;
      --accent-dark: #005f99;
      --text: #333333;
      --text-light: #666666;
      --border: #e0e0e0;
      --background: #f8fafc;
      --white: #ffffff;
      --success: #28a745;
      --warning: #ffc107;
      --danger: #dc3545;
      --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
      --transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      --card-bg: #ffffff;
      --sidebar-bg: #2c3e50;
      --sidebar-text: #ecf0f1;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', 'Roboto', system-ui, -apple-system, sans-serif;
      background-color: var(--background);
      color: var(--text);
      line-height: 1.6;
      display: flex;
      min-height: 100vh;
    }

    /* Sidebar Navigation */
    .sidebar {
      width: 250px;
      background-color: var(--sidebar-bg);
      color: var(--sidebar-text);
      padding: 1.5rem 0;
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    }

    .sidebar-header {
      padding: 0 1.5rem 1.5rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .sidebar-logo {
      height: 40px;
      margin-bottom: 0.5rem;
    }

    .sidebar-user {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1.5rem;
      margin-top: 1rem;
    }

    .sidebar-user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary-light);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      font-weight: bold;
    }

    .sidebar-user-info h4 {
      font-size: 0.95rem;
      margin-bottom: 0.15rem;
    }

    .sidebar-user-info p {
      font-size: 0.8rem;
      opacity: 0.8;
    }

    .sidebar-nav {
      flex: 1;
      padding: 1rem 0;
      overflow-y: auto;
    }

    .sidebar-nav a {
      display: flex;
      align-items: center;
      padding: 0.75rem 1.5rem;
      color: var(--sidebar-text);
      text-decoration: none;
      transition: var(--transition);
      gap: 0.75rem;
      font-weight: 500;
      opacity: 0.9;
    }

    .sidebar-nav a:hover, .sidebar-nav a.active {
      background-color: rgba(255, 255, 255, 0.1);
      opacity: 1;
    }

    .sidebar-nav a i {
      width: 20px;
      text-align: center;
    }

    .sidebar-footer {
      padding: 1rem 1.5rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .logout-btn {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      width: 100%;
      padding: 0.75rem;
      background-color: rgba(231, 76, 60, 0.1);
      color: var(--sidebar-text);
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: var(--transition);
      font-weight: 500;
    }

    .logout-btn:hover {
      background-color: rgba(231, 76, 60, 0.2);
    }

    /* Main Content */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    /* Top Header */
    .top-header {
      background-color: var(--white);
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid var(--border);
      box-shadow: var(--shadow);
      z-index: 10;
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
    }

    .breadcrumb a {
      color: var(--primary);
      text-decoration: none;
      transition: var(--transition);
    }

    .breadcrumb a:hover {
      color: var(--primary-dark);
    }

    .breadcrumb-separator {
      color: var(--text-light);
    }

    .header-actions {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .back-button {
      background-color: var(--primary);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 500;
    }

    .back-button:hover {
      background-color: var(--primary-dark);
      transform: translateY(-1px);
    }

    /* Content Area */
    .content-area {
      flex: 1;
      padding: 2rem;
      overflow-y: auto;
      background-color: var(--background);
    }

    /* Task Management Section */
    .task-management {
      background-color: var(--white);
      border-radius: 8px;
      box-shadow: var(--shadow);
      overflow: hidden;
    }

    .task-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .task-header h2 {
      color: var(--primary-dark);
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .task-header h2 i {
      color: var(--accent);
    }

    .process-info {
      display: flex;
      gap: 1.5rem;
      background-color: var(--primary-light);
      padding: 1rem 1.5rem;
      border-radius: 6px;
      margin-bottom: 1.5rem;
    }

    .info-item {
      display: flex;
      flex-direction: column;
    }

    .info-label {
      font-size: 0.8rem;
      color: var(--text-light);
      font-weight: 500;
      margin-bottom: 0.25rem;
    }

    .info-value {
      font-weight: 600;
      color: var(--primary-dark);
    }

    /* Department Tables */
    .department-section {
      margin-bottom: 2.5rem;
    }

    .department-label {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary-dark);
      padding: 1rem;
      background-color: var(--primary-light);
      border-radius: 6px 6px 0 0;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .department-label i {
      color: var(--accent);
    }

    .department-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      font-size: 0.9rem;
    }

    .department-table th {
      background-color: var(--primary);
      color: var(--white);
      padding: 0.85rem 1rem;
      text-align: left;
      font-weight: 600;
      position: sticky;
      top: 0;
    }

    .department-table td {
      padding: 0.85rem 1rem;
      border-bottom: 1px solid var(--border);
      vertical-align: middle;
    }

    .department-table tr:nth-child(even) {
      background-color: rgba(0, 91, 171, 0.03);
    }

    .department-table tr:hover {
      background-color: rgba(0, 91, 171, 0.07);
    }

    .department-table tr.active-task-row {
      background-color: #e3f7ff;
      animation: highlightTask 1s ease-in-out;
    }

    @keyframes highlightTask {
      0% { background-color: #ffffcc; }
      100% { background-color: #e3f7ff; }
    }

    /* Status badges */
    .status-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.35rem 0.75rem;
      border-radius: 999px;
      font-size: 0.75rem;
      font-weight: 600;
      white-space: nowrap;
    }

    .status-pending {
      background-color: rgba(255, 193, 7, 0.15);
      color: var(--warning);
    }

    .status-completed {
      background-color: rgba(40, 167, 69, 0.15);
      color: var(--success);
    }

    .status-overdue {
      background-color: rgba(220, 53, 69, 0.15);
      color: var(--danger);
    }

    /* Editable fields */
    .editable-days {
      padding: 0.5rem;
      border: 1px solid var(--border);
      border-radius: 4px;
      background-color: var(--white);
      width: 60px;
      text-align: center;
      transition: var(--transition);
      font-family: inherit;
    }

    .editable-days:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
    }

    .delay-reason-input {
      padding: 0.5rem;
      border: 1px solid var(--border);
      border-radius: 4px;
      background-color: var(--white);
      transition: var(--transition);
      width: 100%;
      font-family: inherit;
    }

    .delay-reason-input:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
    }

    /* Button styles */
    .button-container {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .task-start-btn {
      background-color: var(--accent);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .task-start-btn:hover {
      background-color: var(--accent-dark);
      transform: translateY(-2px);
    }

    .task-finish-btn {
      background-color: var(--success);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .task-finish-btn:hover {
      background-color: #218838;
      transform: translateY(-2px);
    }

    .row-save-btn {
      background-color: var(--success);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .row-save-btn:hover {
      background-color: #218838;
      transform: translateY(-2px);
    }

    /* Empty message */
    .empty-message {
      text-align: center;
      padding: 2rem;
      color: var(--text-light);
      font-style: italic;
    }

    /* Modal styles */
    .modal {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background-color: rgba(0,0,0,0.5);
      display: flex; justify-content: center; align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: white;
      padding: 20px 30px;
      border-radius: 8px;
      text-align: center;
      max-width: 500px;
      width: 90%;
    }

    .modal-actions {
      margin-top: 15px;
      display: flex;
      justify-content: space-around;
    }

    .modal-content input[type="date"] {
      padding: 5px;
      font-size: 16px;
    }

    .modal-content button {
      padding: 6px 12px;
      cursor: pointer;
    }

    /* Error message */
    .error-message {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #f44336;
      color: #fff;
      padding: 10px 20px;
      border-radius: 5px;
      opacity: 0;
      transition: opacity 0.3s;
      z-index: 1000;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .error-message.show {
      opacity: 1;
    }

    /* Responsive adjustments */
    @media (max-width: 1024px) {
      .sidebar {
        width: 220px;
      }
    }

    @media (max-width: 768px) {
      body {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        padding: 1rem;
        flex-direction: row;
        flex-wrap: wrap;
      }
      
      .sidebar-header, .sidebar-user {
        display: none;
      }
      
      .sidebar-nav {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        padding: 0;
      }
      
      .sidebar-nav a {
        padding: 0.5rem 1rem;
        border-radius: 4px;
      }
      
      .sidebar-footer {
        display: none;
      }
      
      .department-table {
        display: block;
        overflow-x: auto;
      }
      
      .button-container {
        flex-direction: column;
      }
      
      .task-start-btn,
      .task-finish-btn,
      .row-save-btn {
        width: 100%;
      }
    }

    @media (max-width: 576px) {
      .top-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
      }
      
      .content-area {
        padding: 1rem;
      }
      
      .process-info {
        flex-direction: column;
        gap: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar Navigation -->
  <aside class="sidebar">
    <div class="sidebar-header">
      <img src="/images/accNewLog.webp" alt="Company Logo" class="sidebar-logo">
    </div>
    
    <div class="sidebar-user">
      <div class="sidebar-user-avatar">RK</div>
      <div class="sidebar-user-info">
        <h4><%=user.name %></h4>
        <p><%=user.DeptName %> Department</p>
      </div>
    </div>
    
    <nav class="sidebar-nav">
      <a href="/workflowdashboard" class="active">
        <i class="fas fa-tachometer-alt"></i>
        Dashboard
      </a>
      <a href="/task-selected">
        <i class="fas fa-tasks"></i>
        View Tasks
      </a>
      <a href="#">
        <i class="fas fa-project-diagram"></i>
        Projects
      </a>
      <a href="#">
        <i class="fas fa-calendar-alt"></i>
        Schedule
      </a>
      <a href="#">
        <i class="fas fa-chart-line"></i>
        Reports
      </a>
      <a href="#">
        <i class="fas fa-cog"></i>
        Settings
      </a>
    </nav>
    
    <div class="sidebar-footer">
      <button class="logout-btn" onclick="window.location.href='/logout'">
        <i class="fas fa-sign-out-alt"></i>
        Logout
      </button>
    </div>
  </aside>

  <!-- Main Content Area -->
  <main class="main-content">
    <!-- Top Header -->
    <header class="top-header">
      <div class="breadcrumb">
        <a href="/workflowdashboard">Dashboard</a>
        <span class="breadcrumb-separator">/</span>
        <span>My Tasks</span>
      </div>
      
      <div class="header-actions">
        <button class="back-button" onclick="window.location.href='/workflowdashboard'">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </button>
      </div>
    </header>

    <!-- Content Area -->
    <div class="content-area">
      <section class="task-management">
        <div class="task-header">
          <h2>
            <i class="fas fa-tasks"></i>
            Task Management
          </h2>
        </div>
        
        <div class="process-info">
          <div class="info-item">
            <span class="info-label">Process</span>
            <span class="info-value"><%= tasks[0]?.ProcessName || 'N/A' %></span>
          </div>
          <div class="info-item">
            <span class="info-label">Project</span>
            <span class="info-value"><%= tasks[0]?.ProjectName || 'N/A' %></span>
          </div>
          <div class="info-item">
            <span class="info-label">Package</span>
            <span class="info-value"><%= tasks[0]?.PkgeName || 'N/A' %></span>
          </div>
        </div>
        
        <div id="department-tables-container">
          <!-- Department tables will be inserted here by JavaScript -->
        </div>
      </section>
    </div>
  </main>

  <!-- Error Message -->
  <div id="error-message" class="error-message">
    <i class="fas fa-exclamation-circle"></i>
    <span id="error-text"></span>
  </div>

  <script>
    const userId = "<%= user.id %>";
    const deptId = "<%= user.DepartmentId %>";
    const taskList = <%- JSON.stringify(tasks) %>; 
    const container = document.getElementById('department-tables-container');
    const errorEl = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');

    function showError(message) {
      errorText.textContent = message;
      errorEl.classList.add('show');
      setTimeout(() => errorEl.classList.remove('show'), 5000);
    }

    function renderTasks(tasks) {
      container.innerHTML = '';

      if (tasks.length === 0) {
        container.innerHTML = `<div class="empty-message">No tasks found.</div>`;
        return;
      }

      const grouped = {};
      tasks.forEach(task => {
        if (!grouped[task.DepId]) {
          grouped[task.DepId] = {
            deptName: task.DeptName || `Department ${task.DepId}`,
            tasks: []
          };
        }
        grouped[task.DepId].tasks.push(task);
      });

      Object.values(grouped).forEach(group => {
        // Create department section
        const section = document.createElement('div');
        section.className = 'department-section';
        
        // Create department label
        const deptLabel = document.createElement('div');
        deptLabel.className = 'department-label';
        deptLabel.innerHTML = `<i class="fas fa-building"></i> ${group.deptName}`;
        section.appendChild(deptLabel);
        
        // Create table
        const table = document.createElement('table');
        table.className = 'department-table';
        
        // Create table header
        const thead = document.createElement('thead');
        thead.innerHTML = `
          <tr>
            <th>Task Name</th>
            <th>Description</th>
            <th>Planned Date</th>
            <th>Days Required</th>
            <th>Date Finished</th>
            <th>Status</th>
            <th>Days Delay</th>
            <th>Delay Reason</th>
            <th>Actions</th>
          </tr>
        `;
        table.appendChild(thead);
        
        // Create table body
        const tbody = document.createElement('tbody');
        
        group.tasks.forEach(task => {
          const tr = document.createElement('tr');
          const isOwnDepartment = task.DepId == deptId;

          if (task.IsTaskSelected) {
            tr.classList.add('active-task-row');
          }

          let status = '';
          if (!task.TimeFinished && task.IsTaskSelected) {
            status = '<span class="status-badge status-pending"><i class="fas fa-clock"></i> Pending</span>';
          } else if (task.TimeFinished && task.Delay > 0) {
            status = '<span class="status-badge status-overdue"><i class="fas fa-exclamation-triangle"></i> Overdue</span>';
          } else if (task.TimeFinished) {
            status = '<span class="status-badge status-completed"><i class="fas fa-check-circle"></i> Completed</span>';
          }

          const plannedDate = task.PlannedDate ? task.PlannedDate.split('T')[0] : '';
          const finishDate = task.TimeFinished ? task.TimeFinished.split('T')[0] : '';
          const delayReason = task.DelayReason || '';
          const delayInputDisabled = !isOwnDepartment || !(task.TimeFinished && task.Delay > 0) ? 'disabled' : '';

          const delayInput = `
            <input type="text" value="${delayReason}" class="delay-reason-input" data-task-id="${task.TaskID}" 
              ${delayInputDisabled} placeholder="${delayInputDisabled ? '' : 'Enter delay reason...'}">
          `;

          const taskPlannedCell = task.IsDateFixed && isOwnDepartment
            ? `<td><input type="number" min="1" value="${task.DaysRequired}" class="editable-days" data-task-id="${task.TaskID}"></td>`
            : `<td>${task.DaysRequired}</td>`;
            
          let actionButton = '';
          if (isOwnDepartment && task.IsTaskSelected) {
            if (!task.TimeStarted) {
              actionButton = `<button class="task-start-btn" data-task-id="${task.TaskID}"><i class="fas fa-play"></i> Start</button>`;
            } else if (!task.TimeFinished) {
              actionButton = `<button class="task-finish-btn" data-task-id="${task.TaskID}"><i class="fas fa-flag-checkered"></i> Finish</button>`;
            }
          }

          let extraButtons = '';
          if (isOwnDepartment) {
            extraButtons = `<button class="row-save-btn" data-task-id="${task.TaskID}"><i class="fas fa-save"></i> Save</button>`;
          }

          tr.innerHTML = `
            <td>${task.TaskName || ''}</td>
            <td>${task.TaskPlanned || ''}</td>
            <td>${plannedDate}</td>
            ${taskPlannedCell}
            <td>${finishDate}</td>
            <td>${status}</td>
            <td>${task.Delay !== null ? task.Delay : 0}</td>
            <td>${delayInput}</td>
            <td><div class="button-container">${actionButton}${extraButtons}</div></td>
          `;

          tbody.appendChild(tr);
        });
        
        table.appendChild(tbody);
        section.appendChild(table);
        container.appendChild(section);
      });
    }

    // Event delegation for all buttons in the container
    container.addEventListener('click', async (e) => {
      e.preventDefault();
      const taskId = e.target.dataset.taskId;
      const row = e.target.closest('tr');

      if (e.target.classList.contains('row-save-btn')) {
        const originalHTML = e.target.innerHTML;
        try {
          const delayInput = row.querySelector('.delay-reason-input');
          const daysInput = row.querySelector('.editable-days');
          const updates = [];

          if (delayInput && !delayInput.disabled && delayInput.value.trim() !== '') {
            updates.push({ taskId, field: 'delayReason', value: delayInput.value, usrID: userId });
          } else if (delayInput && delayInput.value.trim() !== '') {
            showError("You can only enter a delay reason for overdue tasks");
            return;
          }

          if (daysInput) {
            updates.push({ taskId, field: 'daysRequired', value: daysInput.value, usrID: userId });
          }

          if (updates.length === 0) {
            showError("No changes to save");
            return;
          }
          console.log(updates)
          e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
          const res = await fetch('/save-task-updates', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ updates })
          });

          if (!res.ok) throw new Error((await res.json()).error || 'Save failed');
          showError('Changes saved successfully');
        } catch (err) {
          showError(err.message);
        } finally {
          e.target.innerHTML = originalHTML;
        }
      }

      if (e.target.classList.contains('task-start-btn')) {
        if (!confirm('Are you sure you want to start this task?')) return;
        const originalHTML = e.target.innerHTML;
        try {
          e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Starting...';
          const now = new Date().toISOString();
          await fetch(`/start-task/${taskId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ startTime: now })
          });

          window.location.reload();
        } catch (err) {
          showError("Failed to start task");
        } finally {
          e.target.innerHTML = originalHTML;
        }
      }

      if (e.target.classList.contains('task-finish-btn')) {
        if (!confirm('Are you sure you want to mark this task as finished?')) return;
        const originalHTML = e.target.innerHTML;
        try {
          e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Finishing...';
          const now = new Date().toISOString();
          await fetch(`/finish-task/${taskId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ finishTime: now })
          });

          window.location.reload();
        } catch (err) {
          showError("Failed to finish task");
        } finally {
          e.target.innerHTML = originalHTML;
        }
      }
    });

    renderTasks(taskList);
  </script>
</body>
</html>