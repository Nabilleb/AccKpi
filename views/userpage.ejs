<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Engineering Task Management | My Tasks</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #2563eb;
      --primary-dark: #1d4ed8;
      --primary-light: #dbeafe;
      --accent: #3b82f6;
      --accent-dark: #2563eb;
      --text: #1f2937;
      --text-light: #6b7280;
      --border: #e5e7eb;
      --background: #f9fafb;
      --white: #ffffff;
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --info: #06b6d4;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      --card-bg: #ffffff;
      --sidebar-bg: #1e293b;
      --sidebar-text: #f8fafc;
      --sidebar-hover: rgba(255, 255, 255, 0.08);
      --sidebar-active: rgba(255, 255, 255, 0.15);
      --sidebar-width: 280px;
      --header-height: 72px;
      --radius-sm: 4px;
      --radius-md: 8px;
      --radius-lg: 12px;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background-color: var(--background);
      color: var(--text);
      line-height: 1.5;
      display: flex;
      min-height: 100vh;
      -webkit-font-smoothing: antialiased;
    }

    /* Sidebar Navigation - Modern Design */
    .sidebar {
      width: var(--sidebar-width);
      background-color: var(--sidebar-bg);
      color: var(--sidebar-text);
      padding: 1.5rem 0;
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      box-shadow: var(--shadow-md);
      position: relative;
      z-index: 100;
      border-right: 1px solid rgba(255, 255, 255, 0.05);
    }

    .sidebar-header {
      padding: 0 1.5rem 1.5rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .sidebar-logo {
      height: 40px;
      margin-bottom: 0.5rem;
      transition: var(--transition);
      filter: brightness(0) invert(1);
    }

    .sidebar-logo:hover {
      transform: scale(1.05);
    }

    .sidebar-user {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      margin: 1rem 1rem 0;
      transition: var(--transition);
      border-radius: var(--radius-md);
      background-color: rgba(255, 255, 255, 0.05);
    }

    .sidebar-user:hover {
      background-color: var(--sidebar-hover);
    }

    .sidebar-user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary), var(--accent));
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--white);
      font-weight: bold;
      flex-shrink: 0;
    }

    .sidebar-user-info {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    .sidebar-user-info h4 {
      font-size: 0.95rem;
      margin-bottom: 0.15rem;
      overflow: hidden;
      text-overflow: ellipsis;
      font-weight: 500;
    }

    .sidebar-user-info p {
      font-size: 0.8rem;
      opacity: 0.8;
      overflow: hidden;
      text-overflow: ellipsis;
      color: rgba(255, 255, 255, 0.7);
    }

    .sidebar-nav {
      flex: 1;
      padding: 1rem 0;
      overflow-y: auto;
    }

    .sidebar-nav a {
      display: flex;
      align-items: center;
      padding: 0.75rem 1.5rem;
      color: var(--sidebar-text);
      text-decoration: none;
      transition: var(--transition);
      gap: 0.75rem;
      font-weight: 500;
      opacity: 0.8;
      margin: 0 0.5rem;
      border-radius: var(--radius-md);
      font-size: 0.95rem;
    }

    .sidebar-nav a:hover {
      background-color: var(--sidebar-hover);
      opacity: 1;
      transform: translateX(4px);
    }

    .sidebar-nav a.active {
      background-color: var(--sidebar-active);
      opacity: 1;
      font-weight: 600;
    }

    .sidebar-nav a i {
      width: 20px;
      text-align: center;
      flex-shrink: 0;
      font-size: 0.9rem;
    }

    .sidebar-footer {
      padding: 1rem 1.5rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .logout-btn {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      width: 100%;
      padding: 0.75rem;
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--sidebar-text);
      border: none;
      border-radius: var(--radius-md);
      cursor: pointer;
      transition: var(--transition);
      font-weight: 500;
      font-size: 0.95rem;
    }

    .logout-btn:hover {
      background-color: rgba(239, 68, 68, 0.2);
      transform: translateY(-1px);
    }

    /* Main Content - Modern Design */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    /* Top Header - Modern Design */
    .top-header {
      background-color: var(--white);
      padding: 0 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid var(--border);
      box-shadow: var(--shadow);
      z-index: 10;
      position: sticky;
      top: 0;
      height: var(--header-height);
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
    }

    .breadcrumb a {
      color: var(--primary);
      text-decoration: none;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-weight: 500;
    }

    .breadcrumb a:hover {
      color: var(--primary-dark);
      text-decoration: underline;
    }

    .breadcrumb-separator {
      color: var(--text-light);
      opacity: 0.6;
    }

    .header-actions {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .back-button {
      background-color: var(--primary);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: var(--radius-md);
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 500;
      box-shadow: var(--shadow);
      font-size: 0.9rem;
    }

    .back-button:hover {
      background-color: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    /* Content Area - Modern Design */
    .content-area {
      flex: 1;
      padding: 2rem;
      overflow-y: auto;
      background-color: var(--background);
    }

    /* Task Management Section - Modern Design */
    .task-management {
      background-color: var(--white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow);
      overflow: hidden;
      transition: var(--transition);
    }

    .task-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border);
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: var(--primary-light);
    }

    .task-header h2 {
      color: var(--primary-dark);
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin: 0;
      font-weight: 600;
    }

    .task-header h2 i {
      color: var(--accent);
    }

    .process-info {
      display: flex;
      gap: 1.5rem;
      background-color: var(--primary-light);
      padding: 1rem 1.5rem;
      border-radius: var(--radius-md);
      margin: 1.5rem;
      flex-wrap: wrap;
      box-shadow: inset 0 0 0 1px rgba(37, 99, 235, 0.1);
      border: 1px solid rgba(37, 99, 235, 0.1);
    }

    .info-item {
      display: flex;
      flex-direction: column;
      min-width: 150px;
    }

    .info-label {
      font-size: 0.8rem;
      color: var(--text-light);
      font-weight: 500;
      margin-bottom: 0.25rem;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .info-label i {
      font-size: 0.7rem;
      opacity: 0.7;
    }

    .info-value {
      font-weight: 600;
      color: var(--primary-dark);
      font-size: 1rem;
    }

    /* Department Tables - Modern Design */
    .department-section {
      margin-bottom: 2rem;
      border-radius: var(--radius-md);
      overflow: hidden;
      box-shadow: var(--shadow);
      transition: var(--transition);
      background-color: var(--white);
    }

    .department-section:hover {
      box-shadow: var(--shadow-md);
    }

    .department-label {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary-dark);
      padding: 1rem 1.5rem;
      background-color: var(--primary-light);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      cursor: pointer;
      user-select: none;
      transition: var(--transition);
      border-bottom: 1px solid var(--border);
    }

    .department-label:hover {
      background-color: rgba(37, 99, 235, 0.1);
    }

    .department-label .toggle-icon {
      margin-left: auto;
      transition: var(--transition);
      font-size: 0.9rem;
      color: var(--primary);
    }

    .department-label.collapsed .toggle-icon {
      transform: rotate(-90deg);
    }

    .department-section.collapsed .table-container {
      display: none;
    }

    .department-label i {
      color: var(--accent);
    }

    .table-container {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    .department-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      font-size: 0.9rem;
      min-width: 1000px;
    }

    .department-table th {
      background-color: var(--primary);
      color: var(--white);
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      position: sticky;
      top: 0;
      border-bottom: 2px solid var(--primary-dark);
    }

    .department-table th:first-child {
      border-top-left-radius: 0;
    }

    .department-table th:last-child {
      border-top-right-radius: 0;
    }

    .department-table td {
      padding: 1rem;
      border-bottom: 1px solid var(--border);
      vertical-align: middle;
      transition: var(--transition);
    }

    .department-table tr:nth-child(even) {
      background-color: rgba(37, 99, 235, 0.02);
    }

    .department-table tr:hover {
      background-color: rgba(37, 99, 235, 0.05);
    }

    .department-table tr.active-task-row {
      background-color: #e3f2ff;
      position: relative;
    }

    .department-table tr.active-task-row::after {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      background-color: var(--accent);
    }

    .department-table tr.highlight-row {
      animation: highlightTask 2s ease-out;
    }

    @keyframes highlightTask {
      0% { background-color: #e3f2ff; }
      50% { background-color: #dbeafe; }
      100% { background-color: #e3f2ff; }
    }

    /* Status badges - Modern Design */
    .status-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.35rem 0.75rem;
      border-radius: 999px;
      font-size: 0.75rem;
      font-weight: 600;
      white-space: nowrap;
      gap: 0.35rem;
    }

    .status-pending {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--warning);
      border: 1px solid rgba(245, 158, 11, 0.2);
    }

    .status-completed {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success);
      border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .status-overdue {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--danger);
      border: 1px solid rgba(239, 68, 68, 0.2);
    }

    .status-inprogress {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--accent);
      border: 1px solid rgba(59, 130, 246, 0.2);
    }

    /* Editable fields - Modern Design */
    .editable-days {
      padding: 0.5rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      background-color: var(--white);
      width: 70px;
      text-align: center;
      transition: var(--transition);
      font-family: inherit;
      font-weight: 500;
      font-size: 0.9rem;
    }

    .editable-days:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    .delay-reason-input {
      padding: 0.5rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      background-color: var(--white);
      transition: var(--transition);
      width: 100%;
      font-family: inherit;
      min-width: 150px;
      font-size: 0.9rem;
    }

    .delay-reason-input:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    /* Button styles - Modern Design */
    .button-container {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .task-start-btn {
      background-color: var(--accent);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: var(--radius-sm);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: var(--shadow);
      min-width: 100px;
      justify-content: center;
      font-size: 0.85rem;
    }

    .task-start-btn:hover {
      background-color: var(--accent-dark);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    .task-start-btn:active {
      transform: translateY(0);
    }

    .task-finish-btn {
      background-color: var(--success);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: var(--radius-sm);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: var(--shadow);
      min-width: 100px;
      justify-content: center;
      font-size: 0.85rem;
    }

    .task-finish-btn:hover {
      background-color: #0d9c6f;
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    .task-finish-btn:active {
      transform: translateY(0);
    }

    .row-save-btn {
      background-color: var(--primary);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: var(--radius-sm);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: var(--shadow);
      min-width: 100px;
      justify-content: center;
      font-size: 0.85rem;
    }

    .row-save-btn:hover {
      background-color: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    .row-save-btn:active {
      transform: translateY(0);
    }

    /* User assignment controls */
    .assign-user-container {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .assign-user-select {
      padding: 0.5rem;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border);
      min-width: 150px;
      font-size: 0.85rem;
      transition: var(--transition);
      background-color: var(--white);
    }

    .assign-user-select:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    .assign-user-btn {
      background-color: var(--info);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: var(--radius-sm);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: var(--shadow);
      font-size: 0.85rem;
    }

    .assign-user-btn:hover {
      background-color: #0da5b0;
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    .assign-user-btn:active {
      transform: translateY(0);
    }

    /* Empty message - Modern Design */
    .empty-message {
      text-align: center;
      padding: 3rem;
      color: var(--text-light);
      font-style: italic;
      background-color: var(--white);
      border-radius: var(--radius-md);
      margin: 1.5rem;
      box-shadow: var(--shadow);
    }

    .empty-message i {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: var(--primary);
      opacity: 0.5;
    }

    /* Modal styles - Modern Design */
    .modal {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background-color: rgba(0,0,0,0.5);
      display: flex; justify-content: center; align-items: center;
      z-index: 1000;
      backdrop-filter: blur(4px);
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s ease;
    }

    .modal.show {
      opacity: 1;
      pointer-events: auto;
    }

    .modal-content {
      background: white;
      padding: 2rem;
      border-radius: var(--radius-lg);
      text-align: center;
      max-width: 500px;
      width: 90%;
      box-shadow: var(--shadow-lg);
      transform: translateY(20px);
      transition: transform 0.3s ease;
    }

    .modal.show .modal-content {
      transform: translateY(0);
    }

    .modal-title {
      margin-bottom: 1.5rem;
      color: var(--primary-dark);
      font-size: 1.25rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .modal-actions {
      margin-top: 1.5rem;
      display: flex;
      justify-content: center;
      gap: 1rem;
    }

    .modal-content input[type="date"] {
      padding: 0.5rem;
      font-size: 1rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      width: 100%;
      max-width: 250px;
      margin: 0 auto;
    }

    .modal-content button {
      padding: 0.5rem 1.5rem;
      cursor: pointer;
      border-radius: var(--radius-sm);
      font-weight: 500;
      transition: var(--transition);
      min-width: 100px;
      font-size: 0.9rem;
    }

    .modal-confirm-btn {
      background-color: var(--success);
      color: white;
      border: none;
      box-shadow: var(--shadow);
    }

    .modal-cancel-btn {
      background-color: transparent;
      color: var(--text-light);
      border: 1px solid var(--border);
      box-shadow: var(--shadow);
    }

    .modal-confirm-btn:hover {
      background-color: #0d9c6f;
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    .modal-cancel-btn:hover {
      background-color: var(--background);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    /* Message notifications - Modern Design */
    .message {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      border-radius: var(--radius-md);
      opacity: 0;
      transition: opacity 0.3s, transform 0.3s;
      z-index: 1000;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      box-shadow: var(--shadow-lg);
      transform: translateY(20px);
      max-width: 400px;
      pointer-events: none;
    }

    .message.show {
      opacity: 1;
      transform: translateY(0);
    }

    .error-message {
      background: var(--danger);
      color: #fff;
    }

    .success-message {
      background: var(--success);
      color: #fff;
    }

    .message i {
      font-size: 1.25rem;
    }

    /* Filter controls - Modern Design */
    .task-filters {
      display: flex;
      gap: 1.5rem;
      padding: 1.25rem 1.5rem;
      background-color: var(--white);
      border-bottom: 1px solid var(--border);
      flex-wrap: wrap;
      align-items: center;
    }

    .filter-group {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .filter-label {
      font-size: 0.85rem;
      font-weight: 500;
      color: var(--text-light);
      white-space: nowrap;
    }

    .filter-select {
      padding: 0.5rem 0.75rem;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border);
      background-color: var(--white);
      font-size: 0.85rem;
      min-width: 150px;
      transition: var(--transition);
    }

    .filter-select:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    .search-container {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      flex-grow: 1;
      min-width: 250px;
      max-width: 400px;
    }

    .search-input {
      padding: 0.5rem 1rem;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border);
      width: 100%;
      font-size: 0.9rem;
      transition: var(--transition);
    }

    .search-input:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    .search-btn {
      background-color: var(--primary);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: var(--radius-sm);
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: var(--shadow);
    }

    .search-btn:hover {
      background-color: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    /* Status quick view - Modern Design */
    .status-quickview {
      display: flex;
      gap: 1.5rem;
      padding: 0.75rem 1.5rem;
      background-color: var(--white);
      border-bottom: 1px solid var(--border);
      flex-wrap: wrap;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.85rem;
      cursor: pointer;
      padding: 0.25rem 0.5rem;
      border-radius: var(--radius-sm);
      transition: var(--transition);
    }

    .status-item:hover {
      background-color: var(--background);
    }

    .status-item.active-filter {
      background-color: var(--primary-light);
    }

    .status-count {
      font-weight: 600;
      color: var(--primary-dark);
    }

    /* Progress indicator */
    .progress-indicator {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.8rem;
      color: var(--text-light);
    }

    .progress-bar {
      height: 8px;
      width: 120px;
      background-color: rgba(0, 0, 0, 0.1);
      border-radius: 4px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--primary), var(--accent));
      transition: width 0.3s ease;
    }

    /* Enhanced button states */
    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
      box-shadow: none !important;
    }

    /* Loading spinner */
    .spinner {
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Keyboard focus styles */
    button:focus-visible, input:focus-visible, select:focus-visible {
      outline: 2px solid var(--accent);
      outline-offset: 2px;
    }

    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
    }

    .tooltip .tooltip-text {
      visibility: hidden;
      width: 120px;
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: var(--radius-sm);
      padding: 5px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      font-size: 0.75rem;
    }

    .tooltip:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
    }

    /* New: Task timeline visualization */
    .task-timeline {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin: 1.5rem;
      padding: 1rem;
      background-color: var(--white);
      border-radius: var(--radius-md);
      box-shadow: var(--shadow);
      overflow-x: auto;
    }

    .timeline-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      min-width: 80px;
      position: relative;
    }

    .timeline-item.completed::after {
      content: '';
      position: absolute;
      top: 16px;
      left: 100%;
      width: 20px;
      height: 2px;
      background-color: var(--success);
      z-index: 1;
    }

    .timeline-item:last-child::after {
      display: none;
    }

    .timeline-dot {
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background-color: var(--border);
      position: relative;
      z-index: 2;
    }

    .timeline-item.completed .timeline-dot {
      background-color: var(--success);
      box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.2);
    }

    .timeline-item.current .timeline-dot {
      background-color: var(--accent);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
      animation: pulse 2s infinite;
    }

    .timeline-label {
      margin-top: 0.5rem;
      font-size: 0.75rem;
      text-align: center;
      color: var(--text-light);
      font-weight: 500;
    }

    .timeline-item.current .timeline-label {
      color: var(--accent);
      font-weight: 600;
    }

    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4); }
      70% { box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); }
      100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }
    }

    /* New: Task priority indicators */
    .priority-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 0.5rem;
    }

    .priority-high {
      background-color: var(--danger);
    }

    .priority-medium {
      background-color: var(--warning);
    }

    .priority-low {
      background-color: var(--success);
    }

    /* New: Responsive table cell stacking */
    @media (max-width: 768px) {
      .department-table {
        min-width: auto;
        display: block;
      }
      
      .department-table thead {
        display: none;
      }
      
      .department-table tr {
        display: block;
        margin-bottom: 1rem;
        border: 1px solid var(--border);
        border-radius: var(--radius-md);
      }
      
      .department-table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-bottom: 1px solid var(--border);
      }
      
      .department-table td::before {
        content: attr(data-label);
        font-weight: 600;
        color: var(--text-light);
        margin-right: 1rem;
        flex: 0 0 120px;
      }
      
      .department-table td:last-child {
        border-bottom: none;
      }
      
      .button-container {
        justify-content: flex-end;
      }
    }

    /* Responsive adjustments */
    @media (max-width: 1200px) {
      .sidebar {
        width: 240px;
      }
      
      .process-info {
        gap: 1rem;
      }
      
      .info-item {
        min-width: 120px;
      }
    }

    @media (max-width: 992px) {
      .sidebar {
        width: 220px;
      }
      
      .department-table td, .department-table th {
        padding: 0.75rem;
      }
      
      .button-container {
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .task-start-btn,
      .task-finish-btn,
      .row-save-btn {
        width: 100%;
      }
    }

    @media (max-width: 768px) {
      body {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        padding: 1rem;
        flex-direction: row;
        flex-wrap: wrap;
        position: sticky;
        top: 0;
        z-index: 100;
      }
      
      .sidebar-header, .sidebar-user {
        display: none;
      }
      
      .sidebar-nav {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        padding: 0;
      }
      
      .sidebar-nav a {
        padding: 0.5rem 1rem;
        border-radius: var(--radius-sm);
        font-size: 0.85rem;
      }
      
      .sidebar-footer {
        display: none;
      }
      
      .content-area {
        padding: 1rem;
      }
      
      .task-filters {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
      
      .filter-group {
        width: 100%;
      }
      
      .search-container {
        width: 100%;
        max-width: none;
      }
      
      .status-quickview {
        gap: 1rem;
      }
      
      .department-table td, .department-table th {
        padding: 0.5rem;
        font-size: 0.8rem;
      }
      
      .status-badge {
        padding: 0.25rem 0.5rem;
      }
      
      .button-container {
        min-width: 120px;
      }
      
      .editable-days, .delay-reason-input {
        width: 100% !important;
      }
      
      .assign-user-container {
        flex-direction: column;
        align-items: flex-start;
      }
    }

    @media (max-width: 576px) {
      .top-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
      }
      
      .process-info {
        margin: 1rem;
        flex-direction: column;
        gap: 0.75rem;
      }

      .info-item {
        width: 100%;
      }
      
      .status-item {
        flex: 1 0 120px;
      }
      
      .modal-actions {
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .modal-content button {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar Navigation -->
  <aside class="sidebar">
    <div class="sidebar-header">
      <img src="/images/accNewLog.webp" alt="Company Logo" class="sidebar-logo">
    </div>
    
    <div class="sidebar-user">
      <div class="sidebar-user-avatar">RK</div>
      <div class="sidebar-user-info">
        <h4><%=user.name %></h4>
        <p><%=user.DeptName %> Department</p>
      </div>
    </div>
    
    <nav class="sidebar-nav">
      <a href="/workflowdashboard" class="active">
        <i class="fas fa-tachometer-alt"></i>
        Dashboard
      </a>
      <a href="/task-selected">
        <i class="fas fa-tasks"></i>
        View Tasks
      </a>
      <a href="#">
        <i class="fas fa-project-diagram"></i>
        Projects
      </a>
      <a href="#">
        <i class="fas fa-calendar-alt"></i>
        Schedule
      </a>
      <a href="#">
        <i class="fas fa-chart-line"></i>
        Reports
      </a>
      <a href="#">
        <i class="fas fa-cog"></i>
        Settings
      </a>
    </nav>
    
    <div class="sidebar-footer">
      <button class="logout-btn" onclick="window.location.href='/logout'">
        <i class="fas fa-sign-out-alt"></i>
        Logout
      </button>
    </div>
  </aside>

  <!-- Main Content Area -->
  <main class="main-content">
    <!-- Top Header -->
    <header class="top-header">
      <div class="breadcrumb">
        <a href="/workFlowDash">
          <i class="fas fa-home"></i>
          Dashboard
        </a>
        <span class="breadcrumb-separator">/</span>
        <span>My Tasks</span>
      </div>
      
      <div class="header-actions">
        <button class="back-button" onclick="window.location.href='/workFlowDash'">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </button>
      </div>
    </header>

    <!-- Content Area -->
    <div class="content-area">
      <section class="task-management">
        <div class="task-header">
          <h2>
            <i class="fas fa-tasks"></i>
            Task Management
          </h2>
          
          <div class="progress-indicator">
            <span>Task Completion:</span>
            <div class="progress-bar">
              <div class="progress-fill" id="completion-progress" style="width: 0%"></div>
            </div>
            <span id="completion-percentage">0%</span>
          </div>
        </div>
        
        <!-- Task Timeline Visualization -->
        <div class="task-timeline" id="task-timeline">
          <!-- Timeline items will be inserted here by JavaScript -->
        </div>
        
        <!-- Task Filters -->
        <div class="task-filters">
          <div class="filter-group">
            <label class="filter-label">Filter by:</label>
            <select id="status-filter" class="filter-select">
              <option value="all">All Tasks</option>
              <option value="pending">Pending</option>
              <option value="inprogress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="overdue">Overdue</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label class="filter-label">Sort by:</label>
            <select id="sort-filter" class="filter-select">
              <option value="priority">Priority</option>
              <option value="duedate">Due Date</option>
              <option value="department">Department</option>
            </select>
          </div>
          
          <div class="search-container">
            <input type="text" id="task-search" class="search-input" placeholder="Search tasks...">
            <button id="search-btn" class="search-btn">
              <i class="fas fa-search"></i>
              Search
            </button>
          </div>
        </div>
        
        <!-- Status Quick View -->
        <div class="status-quickview">
          <div class="status-item" data-filter="all">
            <span class="status-badge"></span>
            <span>All Tasks</span>
            <span class="status-count" id="total-count">0</span>
          </div>
          <div class="status-item" data-filter="pending">
            <span class="status-badge status-pending"></span>
            <span>Pending</span>
            <span class="status-count" id="pending-count">0</span>
          </div>
          <div class="status-item" data-filter="inprogress">
            <span class="status-badge status-inprogress"></span>
            <span>In Progress</span>
            <span class="status-count" id="inprogress-count">0</span>
          </div>
          <div class="status-item" data-filter="completed">
            <span class="status-badge status-completed"></span>
            <span>Completed</span>
            <span class="status-count" id="completed-count">0</span>
          </div>
          <div class="status-item" data-filter="overdue">
            <span class="status-badge status-overdue"></span>
            <span>Overdue</span>
            <span class="status-count" id="overdue-count">0</span>
          </div>
        </div>
        
        <div class="process-info">
          <div class="info-item">
            <span class="info-label">
              <i class="fas fa-project-diagram"></i>
              Process
            </span>
            <span class="info-value"><%= tasks[0]?.ProcessName || 'N/A' %></span>
          </div>
          <div class="info-item">
            <span class="info-label">
              <i class="fas fa-folder"></i>
              Project
            </span>
            <span class="info-value"><%= tasks[0]?.ProjectName || 'N/A' %></span>
          </div>
          <div class="info-item">
            <span class="info-label">
              <i class="fas fa-box"></i>
              Package
            </span>
            <span class="info-value"><%= tasks[0]?.PkgeName || 'N/A' %></span>
          </div>
          <div class="info-item">
            <span class="info-label">
              <i class="fas fa-calendar-alt"></i>
              Start Date
            </span>
            <span class="info-value"><%= tasks[0]?.ProcessStartDate ? new Date(tasks[0].ProcessStartDate).toLocaleDateString() : 'N/A' %></span>
          </div>
        </div>
        
        <div id="department-tables-container">
          <!-- Department tables will be inserted here by JavaScript -->
        </div>
      </section>
    </div>
  </main>

  <!-- Success Message -->
  <div id="success-message" class="success-message message">
    <i class="fas fa-check-circle"></i>
    <span id="success-text"></span>
  </div>

  <!-- Error Message -->
  <div id="error-message" class="error-message message">
    <i class="fas fa-exclamation-circle"></i>
    <span id="error-text"></span>
  </div>

  <!-- Confirmation Modal -->
  <div id="confirmation-modal" class="modal">
    <div class="modal-content">
      <h3 class="modal-title">
        <i class="fas fa-question-circle"></i>
        <span id="modal-message">Are you sure you want to perform this action?</span>
      </h3>
      <div class="modal-actions">
        <button id="modal-confirm-btn" class="modal-confirm-btn">Confirm</button>
        <button id="modal-cancel-btn" class="modal-cancel-btn">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    const userId = "<%= user.id %>";
    const deptId = "<%= user.DepartmentId %>";
    const taskList = <%- JSON.stringify(tasks) %>; 
    const container = document.getElementById('department-tables-container');
    const timelineContainer = document.getElementById('task-timeline');
    const errorEl = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    const successEl = document.getElementById('success-message');
    const successText = document.getElementById('success-text');
    const modal = document.getElementById('confirmation-modal');
    const modalMessage = document.getElementById('modal-message');
    const modalConfirmBtn = document.getElementById('modal-confirm-btn');
    const modalCancelBtn = document.getElementById('modal-cancel-btn');
    let users = [];
    let currentAction = null;
    let currentTaskId = null;

    // Load users for the next department
    async function loadUsers(nextDepId) {
      try {
        if (!nextDepId) return;
        
        const res = await fetch(`/api/users?depId=${nextDepId}`);
        if (!res.ok) throw new Error("Failed to load users");
        
        const data = await res.json();
        users = data.users || [];
      } catch (err) {
        console.error("Error loading users:", err);
        showError("Failed to load users for assignment");
      }
    }

    // Show error message
    function showError(message) {
      errorText.textContent = message;
      errorEl.classList.add('show');
      setTimeout(() => errorEl.classList.remove('show'), 5000);
    }

    // Show success message
    function showSuccess(message) {
      successText.textContent = message;
      successEl.classList.add('show');
      setTimeout(() => successEl.classList.remove('show'), 3000);
    }

    // Show confirmation modal
    function showConfirmation(message, confirmCallback) {
      modalMessage.textContent = message;
      currentAction = confirmCallback;
      modal.classList.add('show');
      
      // Focus the cancel button by default for safety
      modalCancelBtn.focus();
    }

    // Close modal
    function closeModal() {
      modal.classList.remove('show');
      currentAction = null;
      currentTaskId = null;
    }

    // Update status counts and progress bar
    function updateStatusCounts(tasks) {
      let pending = 0, inprogress = 0, completed = 0, overdue = 0;
      const totalTasks = tasks.length;
      
      tasks.forEach(task => {
        if (task.TimeFinished) {
          if (task.Delay > 0) {
            overdue++;
          } else {
            completed++;
          }
        } else if (task.TimeStarted) {
          inprogress++;
        } else if (task.IsTaskSelected) {
          pending++;
        }
      });
      
      document.getElementById('pending-count').textContent = pending;
      document.getElementById('inprogress-count').textContent = inprogress;
      document.getElementById('completed-count').textContent = completed;
      document.getElementById('overdue-count').textContent = overdue;
      document.getElementById('total-count').textContent = totalTasks;
      
      // Update progress bar
      const completedPercentage = totalTasks > 0 ? Math.round((completed / totalTasks) * 100) : 0;
      document.getElementById('completion-progress').style.width = `${completedPercentage}%`;
      document.getElementById('completion-percentage').textContent = `${completedPercentage}%`;
    }

    // Render task timeline visualization
    function renderTaskTimeline(tasks) {
      timelineContainer.innerHTML = '';
      
      // Sort tasks by department and task sequence
      const sortedTasks = [...tasks].sort((a, b) => {
        if (a.DepId !== b.DepId) return a.DepId - b.DepId;
        return a.TaskID - b.TaskID;
      });
      
      // Find the active task
      const activeTask = sortedTasks.find(t => t.IsTaskSelected);
      
      sortedTasks.forEach(task => {
        const timelineItem = document.createElement('div');
        timelineItem.className = 'timeline-item';
        
        if (task.TimeFinished) {
          timelineItem.classList.add('completed');
        }
        
        if (task.IsTaskSelected) {
          timelineItem.classList.add('current');
        }
        
        timelineItem.innerHTML = `
          <div class="timeline-dot"></div>
          <div class="timeline-label">${task.DeptName}</div>
        `;
        
        timelineContainer.appendChild(timelineItem);
      });
    }

    // Filter tasks by status
    function filterTasks(status) {
      const rows = document.querySelectorAll('.department-table tbody tr');
      const statusItems = document.querySelectorAll('.status-item');
      
      // Update active status filter
      statusItems.forEach(item => {
        item.classList.toggle('active-filter', item.dataset.filter === status);
      });
      
      rows.forEach(row => {
        const isPending = row.querySelector('.status-pending');
        const isInProgress = row.querySelector('.status-inprogress');
        const isCompleted = row.querySelector('.status-completed');
        const isOverdue = row.querySelector('.status-overdue');
        
        switch(status) {
          case 'pending':
            row.style.display = isPending ? '' : 'none';
            break;
          case 'inprogress':
            row.style.display = isInProgress ? '' : 'none';
            break;
          case 'completed':
            row.style.display = isCompleted ? '' : 'none';
            break;
          case 'overdue':
            row.style.display = isOverdue ? '' : 'none';
            break;
          default:
            row.style.display = '';
        }
      });
    }

    // Sort tasks
    function sortTasks(sortBy) {
      // This would be more efficient with a proper sorting algorithm on the data
      // For now, we'll just reload the tasks with the new sort order
      renderTasks(taskList, sortBy);
    }

    // Search tasks
    function searchTasks(term) {
      const rows = document.querySelectorAll('.department-table tbody tr');
      term = term.toLowerCase().trim();
      
      if (!term) {
        rows.forEach(row => row.style.display = '');
        return;
      }
      
      rows.forEach(row => {
        const taskName = row.cells[0].textContent.toLowerCase();
        const taskDesc = row.cells[1].textContent.toLowerCase();
        const deptName = row.closest('.department-section').querySelector('.department-label').textContent.toLowerCase();
        const shouldShow = taskName.includes(term) || taskDesc.includes(term) || deptName.includes(term);
        row.style.display = shouldShow ? '' : 'none';
      });
    }

    // Render tasks with department-based sequencing
    async function renderTasks(tasks) {
      container.innerHTML = '';
      
      // First, sort tasks by department and then by task ID
   const sortedTasks = [...tasks].sort((a, b) => {
  if (a.StepOrder !== b.StepOrder) return a.StepOrder - b.StepOrder;

  if (a.Priority !== b.Priority) return a.Priority - b.Priority;

  return a.TaskID - b.TaskID;
});

console.log(sortedTasks)
      // Find the active task and last finished task
      const activeIndex = sortedTasks.findIndex(t => t.IsTaskSelected);
      let lastFinishedTask = null;
      console.log(activeIndex)
      if (activeIndex !== -1) {
        for (let i = activeIndex - 1; i >= 0; i--) {
          console.log("sorted",sortedTasks[i])
          if (sortedTasks[i].TimeFinished) {
            lastFinishedTask = sortedTasks[i];
            break;
          }
        }
      }

      // Load users for the next department (department of the active task)
      if (activeIndex !== -1) {
        const activeTask = sortedTasks[activeIndex];
        await loadUsers(activeTask.DepId);
      }

      if (tasks.length === 0) {
        container.innerHTML = `
          <div class="empty-message">
            <i class="fas fa-tasks"></i>
            <p>No tasks found for this process.</p>
          </div>
        `;
        return;
      }

      // Group tasks by department
      const grouped = {};
      sortedTasks.forEach(task => {
        if (!grouped[task.DepId]) {
          grouped[task.DepId] = {
            deptName: task.DeptName || `Department ${task.DepId}`,
            tasks: []
          };
        }
        grouped[task.DepId].tasks.push(task);
      });

      // Create department sections
      Object.values(grouped).forEach(group => {
        const section = document.createElement('div');
        section.className = 'department-section';
        
        // Department label with toggle
        const deptLabel = document.createElement('div');
        deptLabel.className = 'department-label';
        deptLabel.innerHTML = `
          <i class="fas fa-building"></i> 
          ${group.deptName}
          <span class="badge">${group.tasks.length} tasks</span>
          <i class="fas fa-chevron-down toggle-icon"></i>
        `;
        
        section.appendChild(deptLabel);
        
        // Table container
        const tableContainer = document.createElement('div');
        tableContainer.className = 'table-container';
        
        // Create table
        const table = document.createElement('table');
        table.className = 'department-table';
        
        // Table header
        const thead = document.createElement('thead');
        thead.innerHTML = `
          <tr>
            <th>Task Name</th>
            <th>Description</th>
            <th>Planned Date</th>
            <th>Days Required</th>
            <th>Date Finished</th>
            <th>Status</th>
            <th>Days Delay</th>
            <th>Delay Reason</th>
            <th>Assign Next Task</th>
            <th>Actions</th>
          </tr>
        `;
        table.appendChild(thead);
        
        // Table body
        const tbody = document.createElement('tbody');
        
        group.tasks.forEach(task => {
          const tr = document.createElement('tr');
          const isOwnDepartment = task.DepId == deptId;

          // Highlight active task
          if (task.IsTaskSelected) {
            tr.classList.add('active-task-row');
          }

          // Determine status
          let status = '';
          if (task.TimeStarted && !task.TimeFinished) {
            status = '<span class="status-badge status-inprogress"><i class="fas fa-spinner"></i> In Progress</span>';
          } else if (!task.TimeFinished && task.IsTaskSelected) {
            status = '<span class="status-badge status-pending"><i class="fas fa-clock"></i> Pending</span>';
          } else if (task.TimeFinished && task.Delay > 0) {
            status = '<span class="status-badge status-overdue"><i class="fas fa-exclamation-triangle"></i> Overdue</span>';
          } else if (task.TimeFinished) {
            status = '<span class="status-badge status-completed"><i class="fas fa-check-circle"></i> Completed</span>';
          }

          // Format dates
          const plannedDate = task.PlannedDate ? new Date(task.PlannedDate).toLocaleDateString() : '';
          const finishDate = task.TimeFinished ? new Date(task.TimeFinished).toLocaleDateString() : '';
          const delayReason = task.DelayReason || '';
          
          // Input fields
          const delayInputDisabled = !isOwnDepartment || !(task.TimeFinished && task.Delay > 0) ? 'disabled' : '';
          const delayInput = `
            <input type="text" value="${delayReason}" class="delay-reason-input" data-task-id="${task.TaskID}" 
              ${delayInputDisabled} placeholder="${delayInputDisabled ? '' : 'Enter delay reason...'}">
          `;

          // Days required cell (editable if conditions met)
          const taskPlannedCell = task.IsDateFixed && isOwnDepartment
            ? `<td><input type="number" min="1" value="${task.DaysRequired}" class="editable-days" data-task-id="${task.TaskID}"></td>`
            : `<td>${task.DaysRequired}</td>`;
            
          // Action buttons
          let actionButton = '';
          if (isOwnDepartment && task.IsTaskSelected) {
            if (!task.TimeStarted) {
              actionButton = `<button class="task-start-btn" data-task-id="${task.TaskID}"><i class="fas fa-play"></i> Start</button>`;
            } else if (!task.TimeFinished) {
              actionButton = `<button class="task-finish-btn" data-task-id="${task.TaskID}"><i class="fas fa-flag-checkered"></i> Finish</button>`;
            }
          }

          // Save button for editable fields
          let extraButtons = '';
          if (isOwnDepartment && (task.IsDateFixed || (task.TimeFinished && task.Delay > 0))) {
            extraButtons = `<button class="row-save-btn" data-task-id="${task.TaskID}"><i class="fas fa-save"></i> Save</button>`;
          }

          // User assignment dropdown - only show for the last finished task
          let nextTaskSelect = '';
          if (lastFinishedTask && task.TaskID === lastFinishedTask.TaskID && isOwnDepartment && users.length > 0) {
            nextTaskSelect = `
              <div class="assign-user-container">
                <select class="assign-user-select" data-task-id="${task.TaskID}">
                  <option value="">Select user</option>
                  ${users.map(u => `<option value="${u.usrID}">${u.usrDesc}</option>`).join('')}
                </select>
                <button class="assign-user-btn" data-task-id="${task.TaskID}">
                  <i class="fas fa-paper-plane"></i> Assign
                </button>
              </div>
            `;
          }

          // Build the row
          tr.innerHTML = `
            <td data-label="Task Name">${task.TaskName || ''}</td>
            <td data-label="Description">${task.TaskPlanned || ''}</td>
            <td data-label="Planned Date">${plannedDate}</td>
            ${taskPlannedCell.replace('<td>', '<td data-label="Days Required">')}
            <td data-label="Date Finished">${finishDate}</td>
            <td data-label="Status">${status}</td>
            <td data-label="Days Delay">${task.Delay !== null ? task.Delay : 0}</td>
            <td data-label="Delay Reason">${delayInput}</td>
            <td data-label="Assign Next Task">${nextTaskSelect}</td>
            <td data-label="Actions"><div class="button-container">${actionButton}${extraButtons}</div></td>
          `;

          tbody.appendChild(tr);
        });
        
        table.appendChild(tbody);
        tableContainer.appendChild(table);
        section.appendChild(tableContainer);
        container.appendChild(section);
      });
    }

    // Save task updates
    async function saveTaskUpdates(taskId, updates) {
      try {
        const res = await fetch('/save-task-updates', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ updates })
        });

        if (!res.ok) throw new Error((await res.json()).error || 'Save failed');
        showSuccess('Changes saved successfully');
        return true;
      } catch (err) {
        showError(err.message);
        return false;
      }
    }

    // Start a task
    async function startTask(taskId) {
      try {
        const now = new Date().toISOString();
        const res = await fetch(`/start-task/${taskId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ startTime: now })
        });

        if (!res.ok) throw new Error("Failed to start task");
        showSuccess('Task started successfully');
        window.location.reload();
      } catch (err) {
        showError(err.message);
      }
    }

    // Finish a task
    async function finishTask(taskId) {
      try {
       const task = taskList.find(t => t.TaskID === Number(taskId));

  if (!task) {
    alert('Task not found');
    return;
  }
  const workflowHdrId = task.WorkFlowHdrID;
  const NumberOfProccessID = task.NumberOfProccessID
        const now = new Date().toISOString();
        const res = await fetch(`/finish-task/${taskId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({
        finishTime: now,
        workFlowHdrId: workflowHdrId,
        processID:NumberOfProccessID

      })
    });


        if (!res.ok) throw new Error("Failed to finish task");
        showSuccess('Task marked as finished');
        window.location.reload();
      } catch (err) {
        showError(err.message);
      }
    }

    // Assign user to next task
    async function assignUserToTask(taskId, userId) {
      try {
        const res = await fetch(`/assign-user-to-task/${taskId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId })
        });

        if (!res.ok) throw new Error("Assignment failed");
        showSuccess("User assigned successfully!");
        return true;
      } catch (err) {
        showError("Failed to assign user: " + err.message);
        return false;
      }
    }

    // Event delegation for all buttons in the container
    container.addEventListener('click', async (e) => {
      e.preventDefault();
      
      const taskId = e.target.dataset.taskId;
      const row = e.target.closest('tr');
      currentTaskId = taskId;

      // Save button clicked
      if (e.target.classList.contains('row-save-btn')) {
        const originalHTML = e.target.innerHTML;
        try {
          const delayInput = row.querySelector('.delay-reason-input');
          const daysInput = row.querySelector('.editable-days');
          const updates = [];

          // Validate inputs
          if (delayInput && !delayInput.disabled && delayInput.value.trim() !== '') {
            updates.push({ taskId, field: 'delayReason', value: delayInput.value, usrID: userId });
          } else if (delayInput && delayInput.value.trim() !== '') {
            showError("You can only enter a delay reason for overdue tasks");
            return;
          }

          if (daysInput && daysInput.value && parseInt(daysInput.value) > 0) {
            updates.push({ taskId, field: 'daysRequired', value: daysInput.value, usrID: userId });
          } else if (daysInput && (!daysInput.value || parseInt(daysInput.value) <= 0)) {
            showError("Days required must be a positive number");
            return;
          }

          if (updates.length === 0) {
            showError("No changes to save");
            return;
          }

          e.target.innerHTML = '<i class="fas fa-spinner spinner"></i> Saving...';
          const success = await saveTaskUpdates(taskId, updates);
          if (success) {
            e.target.innerHTML = '<i class="fas fa-check"></i> Saved';
            setTimeout(() => {
              e.target.innerHTML = originalHTML;
            }, 2000);
          } else {
            e.target.innerHTML = originalHTML;
          }
        } catch (err) {
          e.target.innerHTML = originalHTML;
          showError(err.message);
        }
      }

      // Start task button clicked
      if (e.target.classList.contains('task-start-btn')) {
        showConfirmation('Are you sure you want to start this task?', async () => {
          const originalHTML = e.target.innerHTML;
          try {
            e.target.innerHTML = '<i class="fas fa-spinner spinner"></i> Starting...';
            e.target.disabled = true;
            await startTask(taskId);
          } catch (err) {
            e.target.innerHTML = originalHTML;
            e.target.disabled = false;
          }
        });
      }

      // Finish task button clicked
      if (e.target.classList.contains('task-finish-btn')) {
        showConfirmation('Are you sure you want to mark this task as finished?', async () => {
          const originalHTML = e.target.innerHTML;
          try {
            e.target.innerHTML = '<i class="fas fa-spinner spinner"></i> Finishing...';
            e.target.disabled = true;
            console.log("going to function")
            await finishTask(taskId);
          } catch (err) {
            e.target.innerHTML = originalHTML;
            e.target.disabled = false;
          }
        });
      }

      // Assign user button clicked
      if (e.target.classList.contains('assign-user-btn')) {
        const select = row.querySelector('.assign-user-select');
        const selectedUserId = select.value;

        if (!selectedUserId) {
          showError("Please select a user before assigning.");
          return;
        }

        showConfirmation(`Assign this task to ${select.options[select.selectedIndex].text}?`, async () => {
          const originalHTML = e.target.innerHTML;
          try {
            e.target.innerHTML = '<i class="fas fa-spinner spinner"></i> Assigning...';
            e.target.disabled = true;
            const success = await assignUserToTask(taskId, selectedUserId);
            if (success) {
              window.location.reload();
            } else {
              e.target.innerHTML = originalHTML;
              e.target.disabled = false;
            }
          } catch (err) {
            e.target.innerHTML = originalHTML;
            e.target.disabled = false;
          }
        });
      }
    });

    // Status quick view click handler
    document.querySelector('.status-quickview').addEventListener('click', (e) => {
      const statusItem = e.target.closest('.status-item');
      if (statusItem) {
        const filter = statusItem.dataset.filter;
        if (filter) {
          document.getElementById('status-filter').value = filter;
          filterTasks(filter);
        }
      }
    });

    // Modal event handlers
    modalConfirmBtn.addEventListener('click', async () => {
      if (currentAction) {
        await currentAction();
      }
      closeModal();
    });

    modalCancelBtn.addEventListener('click', closeModal);

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Initialize the page
    document.addEventListener('DOMContentLoaded', async () => {
      // Initial render
      renderTasks(taskList);
      renderTaskTimeline(taskList);
      updateStatusCounts(taskList);
      
      // Department section toggling
      document.querySelectorAll('.department-label').forEach(label => {
        label.addEventListener('click', () => {
          label.classList.toggle('collapsed');
          label.parentElement.classList.toggle('collapsed');
        });
      });
      
      // Filter events
      document.getElementById('status-filter').addEventListener('change', (e) => {
        filterTasks(e.target.value);
      });
      
      // Sort events
      document.getElementById('sort-filter').addEventListener('change', (e) => {
        sortTasks(e.target.value);
      });
      
      // Search events
      document.getElementById('search-btn').addEventListener('click', () => {
        const term = document.getElementById('task-search').value;
        searchTasks(term);
      });
      
      document.getElementById('task-search').addEventListener('keyup', (e) => {
        if (e.key === 'Enter') {
          searchTasks(e.target.value);
        }
      });
      
      // Keyboard navigation for inputs
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.target.classList.contains('editable-days')) {
          e.target.closest('tr').querySelector('.row-save-btn').click();
        }
        
        if (e.key === 'Escape') {
          closeModal();
        }
      });
      
      // Focus management for accessibility
      document.addEventListener('focusin', (e) => {
        if (e.target.classList.contains('editable-days') || 
            e.target.classList.contains('delay-reason-input')) {
          e.target.closest('tr').classList.add('keyboard-focus');
        }
      });
      
      document.addEventListener('focusout', (e) => {
        if (e.target.classList.contains('editable-days') || 
            e.target.classList.contains('delay-reason-input')) {
          e.target.closest('tr').classList.remove('keyboard-focus');
        }
      });
    });
  </script>
</body>
</html>