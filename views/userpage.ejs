<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Tasks | Engineering System</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/styles/userpage.css">
 <link rel="stylesheet" href="/styles/homepage.css">
</head>
<body>
  <header class="dashboard-header">
    
    <div class="header-left">
      <img src="/images/accNewLog.webp" alt="Company Logo" class="logo">
      <h1>Task Management</h1>
      
<div class="hierarchy-display">
  <div class="hierarchy-item">
    <span class="hierarchy-label">Process:</span>
    <span class="hierarchy-value"><%= tasks[0]?.ProcessName || 'N/A' %></span>
    <svg class="hierarchy-arrow" viewBox="0 0 24 24">
      <path d="M8.59 16.59L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.59Z"/>
    </svg>
  </div>
  <div class="hierarchy-item">
    <span class="hierarchy-label">Project:</span>
    <span class="hierarchy-value"><%= tasks[0]?.ProjectName || 'N/A' %></span>
    <svg class="hierarchy-arrow" viewBox="0 0 24 24">
      <path d="M8.59 16.59L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.59Z"/>
    </svg>
  </div>
  <div class="hierarchy-item">
    <span class="hierarchy-label">Package:</span>
    <span class="hierarchy-value"><%= tasks[0]?.PackageName || 'N/A' %></span>
  </div>
</div>
    </div>
    <div class="user-info">
      <div class="user-avatar">RK</div>
      <div>
        <p><%=user.name %></p>
        <small><%=user.DeptName %> Department</small>
      </div>
      <button class="logout-btn"> <a href="/logout">Logout</a></button>
        <button class="back-button" onclick="window.location.href='/workflowdashboard'">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z" fill="currentColor"/>
    </svg>
    Back to Dashboard
  </button>
    </div>
  </header>



  <button class="mobile-nav-toggle" id="mobileNavToggle">
    <i class="fas fa-bars"></i>
  </button>
<section class="tasks-section">
  <section class="department-tasks-container">
</section>
  <h2 class="section-title">
    <i class="fas fa-tasks"></i>
    My Tasks
  </h2>
  <table class="tasks-table">
    <thead>
      <tr>
        <th>Task Name</th>
        <th>Task Description</th>
        <th>Planned Date</th>
        <th>Days Required</th>
        <th>Date Finished</th>
        <th>Status</th>
        <th>Days Delay</th>
        <th>Delay Reason</th>
        <th>Buttons</th>
      </tr>
    </thead>
    <tbody>
   
    
    </tbody>
  </table>


</section>


  </main>

<script>
const userId = "<%= user.id %>";
const deptId = "<%= user.DepartmentId %>";
const taskList = <%- JSON.stringify(tasks) %>; // local task list
const tbody = document.querySelector('.tasks-table tbody');

function showError(message) {
  const errorEl = document.getElementById('error-message') || createErrorElement();
  errorEl.textContent = message;
  errorEl.style.display = 'block';
  setTimeout(() => errorEl.style.opacity = 1, 10);
  setTimeout(() => {
    errorEl.style.opacity = 0;
    setTimeout(() => errorEl.style.display = 'none', 300);
  }, 5000);
}

function createErrorElement() {
  const errorEl = document.createElement('div');
  errorEl.id = 'error-message';
  errorEl.style.position = 'fixed';
  errorEl.style.bottom = '20px';
  errorEl.style.right = '20px';
  errorEl.style.background = '#f44336';
  errorEl.style.color = '#fff';
  errorEl.style.padding = '10px 20px';
  errorEl.style.borderRadius = '5px';
  errorEl.style.opacity = 0;
  errorEl.style.transition = 'opacity 0.3s';
  errorEl.style.zIndex = 1000;
  document.body.appendChild(errorEl);
  return errorEl;
}

function renderTasks(tasks) {
  tbody.innerHTML = '';

  if (tasks.length === 0) {
    tbody.innerHTML = `<tr><td colspan="9" class="empty-message">No tasks found.</td></tr>`;
    return;
  }

  // Group tasks by department
  const grouped = {};
  tasks.forEach(task => {
    if (!grouped[task.DepId]) {
      grouped[task.DepId] = {
        deptName: task.DeptName || `Department ${task.DepId}`,
        tasks: []
      };
    }
    grouped[task.DepId].tasks.push(task);
  });

  // Render by department
  Object.values(grouped).forEach(group => {
    // Insert a header row for the department
    const deptRow = document.createElement('tr');
    deptRow.innerHTML = `
      <td colspan="9" class="department-label">
        <strong>Department:</strong> ${group.deptName}
      </td>
    `;
    deptRow.classList.add('department-header');
    tbody.appendChild(deptRow);

    group.tasks.forEach(task => {
      const tr = document.createElement('tr');
      const isOwnDepartment = task.DepId == deptId;

      if (task.IsTaskSelected) {
        tr.classList.add('active-task-row');
      }

      let status = '';
      if (!task.TimeFinished && task.IsTaskSelected) {
        status = '<span class="status-badge status-pending">Pending</span>';
      } else if (task.TimeFinished && task.Delay > 0) {
        status = '<span class="status-badge status-overdue">Overdue</span>';
      } else if (task.TimeFinished) {
        status = '<span class="status-badge status-completed">Completed</span>';
      }

      const plannedDate = task.PlannedDate ? task.PlannedDate.split('T')[0] : '';
      const finishDate = task.TimeFinished ? task.TimeFinished.split('T')[0] : '';
      const delayReason = task.DelayReason || '';
      const delayInputDisabled = !isOwnDepartment || !(task.TimeFinished && task.Delay > 0) ? 'disabled' : '';

      const delayInput = `
        <input type="text" value="${delayReason}" class="delay-reason-input" data-task-id="${task.TaskID}" 
          ${delayInputDisabled} placeholder="${delayInputDisabled ? '' : 'Enter delay reason...'}">
      `;

      const taskPlannedCell = !task.isDateFixed && isOwnDepartment
        ? `<td><input type="number" min="1" value="${task.DaysRequired}" class="editable-days" data-task-id="${task.TaskID}"></td>`
        : `<td>${task.DaysRequired}</td>`;

      let actionButton = '';
      if (isOwnDepartment && task.IsTaskSelected) {
        if (!task.TimeStarted) {
          actionButton = `<button class="task-start-btn" data-task-id="${task.TaskID}"><i class="fas fa-play"></i> Start</button>`;
        } else if (!task.TimeFinished) {
          actionButton = `<button class="task-finish-btn" data-task-id="${task.TaskID}"><i class="fas fa-flag-checkered"></i> Finish</button>`;
        }
      }

      let extraButtons = '';
      if (isOwnDepartment) {
        extraButtons = `<button class="row-save-btn" data-task-id="${task.TaskID}"><i class="fas fa-save"></i> Save</button>`;
      }

      tr.innerHTML = `
        <td>${task.TaskName || ''}</td>
        <td>${task.TaskPlanned || ''}</td>
        <td>${plannedDate}</td>
        ${taskPlannedCell}
        <td>${finishDate}</td>
        <td>${status}</td>
        <td>${task.Delay !== null ? task.Delay : 0}</td>
        <td>${delayInput}</td>
        <td><div class="button-container">${actionButton}${extraButtons}</div></td>
      `;

      tbody.appendChild(tr);
    });
  });
}


tbody.addEventListener('click', async (e) => {
  e.preventDefault();
  const taskId = e.target.dataset.taskId;
  const row = e.target.closest('tr');

  if (e.target.classList.contains('row-save-btn')) {
    const originalHTML = e.target.innerHTML;
    try {
      const delayInput = row.querySelector('.delay-reason-input');
      const daysInput = row.querySelector('.editable-days');
      const updates = [];

      if (delayInput && !delayInput.disabled && delayInput.value.trim() !== '') {
        updates.push({ taskId, field: 'delayReason', value: delayInput.value, usrID: userId });
      } else if (delayInput && delayInput.value.trim() !== '') {
        showError("You can only enter a delay reason for overdue tasks");
        return;
      }

      if (daysInput) {
        updates.push({ taskId, field: 'daysRequired', value: daysInput.value, usrID: userId });
      }

      if (updates.length === 0) {
        showError("No changes to save");
        return;
      }

      e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
      const res = await fetch('/save-task-updates', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ updates })
      });

      if (!res.ok) throw new Error((await res.json()).error || 'Save failed');
      showError('Changes saved successfully');
    } catch (err) {
      showError(err.message);
    } finally {
      e.target.innerHTML = originalHTML;
    }
  }

 if (e.target.classList.contains('task-start-btn')) {
  if (!confirm('Are you sure you want to start this task?')) return;
  const originalHTML = e.target.innerHTML;
  try {
    e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Starting...';
    const now = new Date().toISOString();
    await fetch(`/start-task/${taskId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ startTime: now })
    });

    window.location.reload();
  } catch (err) {
    showError("Failed to start task");
  } finally {
    e.target.innerHTML = originalHTML;
  }
}

if (e.target.classList.contains('task-finish-btn')) {
  if (!confirm('Are you sure you want to mark this task as finished?')) return;
  const originalHTML = e.target.innerHTML;
  try {
    e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Finishing...';
    const now = new Date().toISOString();
    await fetch(`/finish-task/${taskId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ finishTime: now })
    });

    window.location.reload(); // âœ… Refreshes view with correct selected task
  } catch (err) {
    showError("Failed to finish task");
  } finally {
    e.target.innerHTML = originalHTML;
  }
}

});

renderTasks(taskList); 
</script>


<style>
.active-task-row {
  background-color: #e3f7ff;
  animation: highlightTask 1s ease-in-out;
}
@keyframes highlightTask {
  0% { background-color: #ffffcc; }
  100% { background-color: #e3f7ff; }
}
</style>










</body>
</html>