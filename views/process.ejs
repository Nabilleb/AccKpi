<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Process Management</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #3b82f6;
      --primary-light: #eff6ff;
      --primary-dark: #2563eb;
      --primary-extra-light: #f8fafc;
      --text: #1e293b;
      --text-light: #64748b;
      --border: #e2e8f0;
      --border-dark: #cbd5e1;
      --background: #f1f5f9;
      --white: #ffffff;
      --success: #10b981;
      --error: #ef4444;
      --warning: #f59e0b;
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 14px;
      --shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.05);
      --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
      --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      --spacing-xs: 0.5rem;
      --spacing-sm: 1rem;
      --spacing-md: 1.5rem;
      --spacing-lg: 2rem;
      --spacing-xl: 3rem;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background-color: var(--background);
      color: var(--text);
      line-height: 1.5;
      padding: var(--spacing-lg);
      -webkit-font-smoothing: antialiased;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    h1, h2, h3 {
      font-weight: 600;
      color: var(--text);
      margin-bottom: var(--spacing-md);
    }

    h1 {
      font-size: 1.75rem;
      color: var(--primary-dark);
      display: flex;
      align-items: center;
      gap: var(--spacing-sm);
    }

    h1::before {
      content: "";
      display: block;
      width: 24px;
      height: 24px;
      background-color: var(--primary);
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='currentColor'%3E%3Cpath fill-rule='evenodd' d='M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z' clip-rule='evenodd' /%3E%3C/svg%3E");
      mask-repeat: no-repeat;
      mask-position: center;
    }

    h2 {
      font-size: 1.5rem;
      margin-top: var(--spacing-xl);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border);
    }

    /* Add to your existing styles */
.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
}

.flex-1 {
  flex: 1 1 0%;
}

.mb-6 {
  margin-bottom: 1.5rem;
}

.mr-1 {
  margin-right: 0.25rem;
}

.border-gray-200 {
  border-color: var(--border);
}

    .card {
      background-color: var(--white);
      border-radius: var(--radius-md);
      box-shadow: var(--shadow);
      padding: var(--spacing-lg);
      margin-bottom: var(--spacing-lg);
      transition: var(--transition);
    }

    .card:hover {
      box-shadow: var(--shadow-md);
    }

    .form-group {
      margin-bottom: var(--spacing-md);
    }

    label {
      display: block;
      margin-bottom: var(--spacing-xs);
      font-weight: 500;
      color: var(--text);
      font-size: 0.95rem;
    }

    input[type="text"],
    input[type="email"],
    input[type="password"],
    input[type="number"],
    select,
    textarea {
      width: 100%;
      padding: 0.75rem var(--spacing-sm);
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      font-size: 1rem;
      transition: var(--transition);
      background-color: var(--primary-extra-light);
    }

    input[type="text"]:focus,
    input[type="email"]:focus,
    input[type="password"]:focus,
    input[type="number"]:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
      background-color: var(--white);
    }

    select {
      min-height: 150px;
      padding: var(--spacing-xs);
    }

    select[multiple] {
      background-image: none;
    }

    option {
      padding: 0.75rem var(--spacing-sm);
      margin: 0.25rem 0;
      border-radius: var(--radius-sm);
      transition: var(--transition);
      cursor: pointer;
    }

    option:hover {
      background-color: var(--primary-light);
    }

    option:checked {
      background-color: var(--primary);
      color: var(--white);
      font-weight: 500;
    }

    .help-text {
      display: block;
      margin-top: var(--spacing-xs);
      font-size: 0.85rem;
      color: var(--text-light);
      line-height: 1.4;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      background-color: var(--primary);
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: var(--radius-sm);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      font-size: 1rem;
      box-shadow: var(--shadow);
    }

    .btn:hover {
      background-color: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    .btn-secondary {
      background-color: var(--white);
      color: var(--text);
      border: 1px solid var(--border);
    }

    .btn-secondary:hover {
      background-color: var(--primary-extra-light);
      border-color: var(--border-dark);
    }

    .btn-sm {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }

    .btn-icon {
      padding: 0.5rem;
      border-radius: 50%;
    }

    #steps-list {
      margin-top: var(--spacing-md);
      padding: var(--spacing-md);
      background-color: var(--primary-light);
      border-radius: var(--radius-sm);
      color: var(--primary-dark);
      font-size: 0.95rem;
      line-height: 1.6;
      border: 1px solid rgba(59, 130, 246, 0.2);
    }

    #steps-list.empty {
      background-color: var(--background);
      color: var(--text-light);
      border: 1px dashed var(--border);
    }

    #steps-list strong {
      font-weight: 600;
      display: block;
      margin-bottom: var(--spacing-sm);
    }
 .alert {
      padding: 0.75rem 1.25rem;
      margin-bottom: 1rem;
      border-radius: var(--radius-sm);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      animation: fadeIn 0.3s ease-out;
    }
    
    .alert-danger {
      background-color: rgba(239, 68, 68, 0.1);
      border-left: 4px solid var(--error);
      color: var(--error);
    }
    
    .alert-success {
      background-color: rgba(16, 185, 129, 0.1);
      border-left: 4px solid var(--success);
      color: var(--success);
    }
    
    .alert-icon {
      font-size: 1.25rem;
      flex-shrink: 0;
    }
    
    .validation-error {
      color: var(--error);
      font-size: 0.85rem;
      margin-top: 0.25rem;
      display: none;
    }
    
    .is-invalid {
      border-color: var(--error) !important;
      background-color: rgba(239, 68, 68, 0.05) !important;
    }
    
    .steps-error {
      animation: shake 0.5s ease;
      border-color: var(--error) !important;
      background-color: rgba(239, 68, 68, 0.05) !important;
    }
    
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      20%, 60% { transform: translateX(-5px); }
      40%, 80% { transform: translateX(5px); }
    }
    
    .step-item {
      display: flex;
      align-items: center;
      padding: var(--spacing-sm);
      border-radius: var(--radius-sm);
      background-color: rgba(255, 255, 255, 0.7);
      margin-bottom: var(--spacing-xs);
      transition: var(--transition);
    }

    .step-item:last-child {
      margin-bottom: 0;
    }

    .step-item:hover {
      background-color: var(--white);
      box-shadow: var(--shadow);
    }

    .step-number {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 28px;
      height: 28px;
      background-color: var(--primary);
      color: white;
      border-radius: 50%;
      text-align: center;
      margin-right: var(--spacing-sm);
      font-size: 0.875rem;
      font-weight: 600;
      flex-shrink: 0;
    }

    .step-name {
      flex: 1;
      font-weight: 500;
    }

    .drag-handle {
      cursor: move;
      color: var(--text-light);
      margin-left: var(--spacing-sm);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0.25rem;
      border-radius: var(--radius-sm);
    }

    .drag-handle:hover {
      opacity: 1;
      background-color: rgba(0, 0, 0, 0.05);
    }

    table {
      width: 100%;
      border-collapse: collapse;
      background-color: var(--white);
      border-radius: var(--radius-md);
      overflow: hidden;
      box-shadow: var(--shadow);
    }

    th, td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid var(--border);
    }

    th {
      background-color: var(--primary-extra-light);
      font-weight: 600;
      color: var(--text);
      font-size: 0.875rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    tr:last-child td {
      border-bottom: none;
    }

    tr:hover td {
      background-color: var(--primary-extra-light);
    }

    .actions {
      display: flex;
      gap: var(--spacing-xs);
    }

    .add-task-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      padding: 0.5rem 1rem;
      background-color: var(--primary);
      color: white;
      border-radius: var(--radius-sm);
      text-decoration: none;
      font-size: 0.875rem;
      transition: var(--transition);
    }

    .add-task-btn:hover {
      background-color: var(--primary-dark);
      transform: translateY(-1px);
    }

    .add-task-btn::before {
      content: "+";
      font-weight: bold;
    }

    .empty-state {
      text-align: center;
      padding: var(--spacing-xl) var(--spacing-md);
      color: var(--text-light);
    }

    .empty-state svg {
      width: 64px;
      height: 64px;
      margin-bottom: var(--spacing-md);
      opacity: 0.5;
    }

    /* Drag and drop styles */
    .dragging {
      opacity: 0.5;
      background-color: var(--primary-light);
      border: 1px dashed var(--primary);
    }

    .drag-over {
      background-color: var(--primary-extra-light);
      border: 1px dashed var(--primary);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      body {
        padding: var(--spacing-md);
      }
      
      .card {
        padding: var(--spacing-md);
      }

      table {
        display: block;
        overflow-x: auto;
      }

      .actions {
        flex-direction: column;
      }
    }

    /* Animation */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animate-in {
      animation: fadeIn 0.3s ease-out forwards;
    }

    /* Utility classes */
    .mt-1 { margin-top: var(--spacing-xs); }
    .mt-2 { margin-top: var(--spacing-sm); }
    .mt-3 { margin-top: var(--spacing-md); }
    .mt-4 { margin-top: var(--spacing-lg); }
    .mt-5 { margin-top: var(--spacing-xl); }

    .flex {
      display: flex;
    }

    .items-center {
      align-items: center;
    }

    .justify-between {
      justify-content: space-between;
    }

    .gap-2 {
      gap: var(--spacing-sm);
    }

       .form-container {
      max-width: 900px;
      margin: 2rem auto;
      background: var(--white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .form-container:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg), 0 15px 30px rgba(0,0,0,0.12);
    }

    .form-header {
      background: var(--gradient);
      color: var(--white);
      padding: 1.75rem 2.5rem;
      position: relative;
      overflow: hidden;
    }

    .form-header::before {
      content: "";
      position: absolute;
      top: -50px;
      right: -50px;
      width: 150px;
      height: 150px;
      background: rgba(255,255,255,0.1);
      border-radius: 50%;
    }

    .form-header::after {
      content: "";
      position: absolute;
      bottom: -80px;
      right: -30px;
      width: 200px;
      height: 200px;
      background: rgba(255,255,255,0.05);
      border-radius: 50%;
    }

    .form-header h1 {
      font-size: 1.75rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 1rem;
      margin: 0;
      position: relative;
      z-index: 1;
    }

    .form-header i {
      font-size: 1.5em;
      color: rgba(255,255,255,0.9);
    }

    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.75rem;
      padding: 2.5rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      position: relative;
    }

    label {
      font-weight: 600;
      color: var(--text);
      font-size: 0.95rem;
    }

    .required-field::after {
      content: " *";
      color: var(--danger);
    }

    input, select {
      padding: 0.875rem 1.25rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      font-size: 1rem;
      transition: all 0.2s ease;
      background: var(--white);
      width: 100%;
    }

    input:focus, select:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    input::placeholder {
      color: var(--text-light);
      opacity: 0.6;
    }

    .form-actions {
      grid-column: 1 / -1;
      display: flex;
      justify-content: flex-end;
      gap: 1.25rem;
      border-top: 1px solid var(--border);
      padding: 1.75rem 2.5rem;
      margin-top: 1rem;
    }

    .btn {
      padding: 0.875rem 1.75rem;
      border: none;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      transition: all 0.2s ease;
      font-size: 1rem;
    }

    .btn-primary {
      background: var(--gradient);
      color: var(--white);
      box-shadow: 0 4px 6px rgba(59, 130, 246, 0.15);
    }

    .btn-primary:hover {
      background: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: 0 6px 12px rgba(59, 130, 246, 0.2);
    }

    .btn-secondary {
      background: var(--white);
      border: 1px solid var(--border);
      color: var(--text);
    }

    .btn-secondary:hover {
      background: var(--background);
      border-color: var(--text-light);
    }

    .btn-success {
      background: var(--success);
      color: white;
    }

    .btn-danger {
      background: var(--danger);
      color: white;
    }

    .workflow-info {
      background: var(--primary-light);
      padding: 1.25rem;
      border-radius: var(--radius-sm);
      grid-column: 1 / -1;
      font-size: 0.95rem;
      border-left: 4px solid var(--primary);
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .workflow-info i {
      color: var(--primary);
      margin-right: 0.5rem;
    }

    .success-message {
      background: rgba(16, 185, 129, 0.1);
      padding: 1.25rem;
      border-radius: var(--radius-sm);
      grid-column: 1 / -1;
      font-size: 0.95rem;
      border-left: 4px solid var(--success);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .success-message i {
      color: var(--success);
      font-size: 1.25rem;
    }

    .process-steps {
      grid-column: 1 / -1;
      margin-top: 0.5rem;
      padding: 1.5rem;
      background: var(--background);
      border-radius: var(--radius-md);
      border: 1px dashed var(--border);
      position: relative;
      overflow: hidden;
    }

    .process-steps::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--gradient);
    }

    .process-steps h3 {
      margin: 0 0 1rem 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .process-steps h3 i {
      font-size: 1.25rem;
    }

    .process-steps ol {
      padding-left: 1.5rem;
      margin: 0;
      display: grid;
      gap: 0.75rem;
    }

    .process-steps li {
      padding-left: 0.5rem;
    }

    .process-steps li::marker {
      color: var(--primary);
      font-weight: 600;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="flex items-center gap-2 mb-6">
      <a href="/adminpage" class="btn btn-secondary btn-sm" style="padding-left: 0.75rem;">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
          <path d="M19 12H5M12 19l-7-7 7-7"/>
        </svg>
        Admin Dashboard
      </a>
      <div class="flex-1 border-t border-gray-200"></div>
    </div>
    <h1>Process Management</h1>
    
    <!-- Improved error message display -->
    <% if (errorMessage) { %>
      <div class="alert alert-danger">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="alert-icon">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
        <div><%= errorMessage %></div>
      </div>
    <% } %>
    
    <% if (successMessage) { %>
      <div class="alert alert-success">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="alert-icon">
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22 4 12 14.01 9 11.01"></polyline>
        </svg>
        <div><%= successMessage %></div>
      </div>
    <% } %>

    <div class="card animate-in">
      <h2>Create New Process</h2>
      
      <form id="processForm" action="/postProcess" method="POST">
        <div class="form-group">
          <label for="ProcessName">Process Name</label>
          <input type="text" name="ProcessName" id="ProcessName" required 
                 placeholder="e.g. Employee Onboarding, Purchase Approval">
          <span class="help-text">Give your process a clear, descriptive name that identifies its purpose.</span>
          <div class="validation-error" id="ProcessName-error">Please enter a process name</div>
        </div>

        <div class="form-group">
          <label for="processDesc">Description (Optional)</label>
          <textarea name="processDesc" id="processDesc" rows="3" 
                    placeholder="Briefly describe what this process is for"></textarea>
        </div>

        <div class="form-group">
          <label for="Departments">Workflow Departments</label>
          <select name="Departments" id="Departments" multiple required>
            <% departments.forEach(dept => { %>
              <option value="<%= dept.DepartmentID %>"><%= dept.DeptName %></option>
            <% }); %>
          </select>
          <span class="help-text">
            Hold Ctrl/Cmd to select multiple departments. The order you select them will determine the workflow steps.
            Drag to reorder steps after selection.
          </span>
          <div class="validation-error" id="Departments-error">Please select at least one department</div>
        </div>

        <div id="steps-list" class="empty">No departments selected yet. Selected departments will appear here as workflow steps.</div>
        <div id="hiddenInputs"></div>
        <div id="stepsError" class="validation-error" style="display: none;">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 0.5rem;">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          Please select at least one department for the workflow
        </div>

        <div class="flex justify-between mt-4">
          <button type="reset" class="btn btn-secondary">Clear Form</button>
          <button type="submit" class="btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
              <polyline points="17 21 17 13 7 13 7 21"></polyline>
              <polyline points="7 3 7 8 15 8"></polyline>
            </svg>
            Save Process
          </button>
        </div>
      </form>
    </div>

    <div class="card animate-in" style="animation-delay: 0.1s;">
      <h2>Existing Processes</h2>
      <% if (processes.length === 0) { %>
        <div class="empty-state">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          <h3>No Processes Found</h3>
          <p>Create your first process by filling out the form above.</p>
        </div>
      <% } else { %>
     <table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Description</th>
      <th>Steps</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% processes.forEach(proc => { %>
      <tr>
        <td><%= proc.NumberOfProccessID %></td>
        <td><%= proc.ProcessName %></td>
        <td><%= proc.processDesc || '—' %></td>
        <td>
          <% const steps = stepsByProcess[proc.NumberOfProccessID] || []; %>
          <% if (steps.length > 0) { %>
            <ol>
              <% steps.forEach(step => { %>
                <li>Step <%= step.StepOrder %>: <%= step.DeptName %></li>
              <% }) %>
            </ol>
          <% } else { %>
            No steps
          <% } %>
        </td>
        <td>
          <button
            class="add-task-btn"
            data-process-id="<%= proc.NumberOfProccessID %>"
            data-process-name="<%= proc.ProcessName %>"
            data-steps='<%- JSON.stringify(steps) %>'
          >
            Add Task
          </button>
        </td>
      </tr>
    <% }) %>
  </tbody>
</table>
      <% } %>
    </div>
  </div>

  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const deptSelect = document.getElementById('Departments');
    const stepsList = document.getElementById('steps-list');
    const hiddenInputs = document.getElementById('hiddenInputs');
    const selectedOrder = [];
    const processForm = document.getElementById('processForm');
    const stepsError = document.getElementById('stepsError');

    // Update styles and display on change
    deptSelect.addEventListener('change', (event) => {
      updateSelectedOrder();
      updateDisplay();
      styleSelectedOptions();
      validateSteps();
    });

    function validateSteps() {
      if (selectedOrder.length === 0) {
        stepsList.classList.add('steps-error');
        stepsError.style.display = 'flex';
        return false;
      } else {
        stepsList.classList.remove('steps-error');
        stepsError.style.display = 'none';
        return true;
      }
    }

    function validateForm() {
      let isValid = true;
      
      // Validate process name
      const processName = document.getElementById('ProcessName');
      if (!processName.value.trim()) {
        processName.classList.add('is-invalid');
        document.getElementById('ProcessName-error').style.display = 'block';
        isValid = false;
      } else {
        processName.classList.remove('is-invalid');
        document.getElementById('ProcessName-error').style.display = 'none';
      }
      
      // Validate departments
      if (!validateSteps()) {
        document.getElementById('Departments-error').style.display = 'block';
        isValid = false;
      } else {
        document.getElementById('Departments-error').style.display = 'none';
      }
      
      return isValid;
    }

    // Form submission validation
    processForm.addEventListener('submit', function(e) {
      if (!validateForm()) {
        e.preventDefault();
        
        // Scroll to first error
        const firstError = document.querySelector('.is-invalid, .steps-error');
        if (firstError) {
          firstError.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
        }
      }
    });

    // Real-time validation for process name
    document.getElementById('ProcessName').addEventListener('input', function() {
      if (this.value.trim()) {
        this.classList.remove('is-invalid');
        document.getElementById('ProcessName-error').style.display = 'none';
      }
    });

    function updateSelectedOrder() {
      // Keep the existing order but update selected status
      const selectedValues = Array.from(deptSelect.selectedOptions).map(opt => opt.value);
      
      // Remove unselected items
      for (let i = selectedOrder.length - 1; i >= 0; i--) {
        if (!selectedValues.includes(selectedOrder[i])) {
          selectedOrder.splice(i, 1);
        }
      }
      
      // Add newly selected items to end
      Array.from(deptSelect.selectedOptions).forEach(opt => {
        if (!selectedOrder.includes(opt.value)) {
          selectedOrder.push(opt.value);
        }
      });
    }

    function updateDisplay() {
      if (selectedOrder.length === 0) {
        stepsList.innerHTML = 'No departments selected yet. Selected departments will appear here as workflow steps.';
        stepsList.className = 'empty';
        hiddenInputs.innerHTML = '';
        return;
      }
      
      let html = '<strong>Workflow Steps</strong>';
      hiddenInputs.innerHTML = '';
      
      selectedOrder.forEach((id, idx) => {
        const option = deptSelect.querySelector(`option[value="${id}"]`);
        
        html += `
          <div class="step-item" data-id="${id}">
            <span class="step-number">${idx + 1}</span>
            <span class="step-name">${option.textContent}</span>
            <span class="drag-handle" title="Drag to reorder">☰</span>
          </div>
        `;
        
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = `Steps[${idx}]`;
        input.value = id;
        hiddenInputs.appendChild(input);
      });
      
      stepsList.innerHTML = html;
      stepsList.className = '';
      
      initDragAndDrop();
    }

    function initDragAndDrop() {
      const stepItems = stepsList.querySelectorAll('.step-item');
      
      stepItems.forEach(item => {
        item.setAttribute('draggable', true);
        
        item.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('text/plain', item.dataset.id);
          item.classList.add('dragging');
          stepsList.classList.add('drag-over');
        });
        
        item.addEventListener('dragend', () => {
          document.querySelectorAll('.dragging, .drag-over').forEach(el => {
            el.classList.remove('dragging', 'drag-over');
          });
          updateOrderFromDOM();
        });
      });
      
      stepsList.addEventListener('dragover', e => {
        e.preventDefault();
        const draggingItem = document.querySelector('.dragging');
        const afterElement = getDragAfterElement(stepsList, e.clientY);
        
        if (afterElement) {
          stepsList.insertBefore(draggingItem, afterElement);
        } else {
          stepsList.appendChild(draggingItem);
        }
      });
    }
    
    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.step-item:not(.dragging)')];
      
      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    function updateOrderFromDOM() {
      const newOrder = Array.from(stepsList.querySelectorAll('.step-item')).map(item => item.dataset.id);
      
      // Update selectedOrder to match DOM order
      selectedOrder.length = 0;
      selectedOrder.push(...newOrder);
      
      // Update select element to match (but don't trigger change event)
      Array.from(deptSelect.options).forEach(opt => {
        opt.selected = selectedOrder.includes(opt.value);
      });
      
      // Update hidden inputs
      updateDisplay();
    }

    // Style selected options on load
    styleSelectedOptions();

    function styleSelectedOptions() {
      Array.from(deptSelect.options).forEach(opt => {
        if (opt.selected) {
          opt.style.backgroundColor = 'var(--primary)';
          opt.style.color = 'var(--white)';
          opt.style.fontWeight = '500';
        } else {
          opt.style.backgroundColor = '';
          opt.style.color = '';
          opt.style.fontWeight = '';
        }
      });
    }

    document.querySelectorAll('.add-task-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const processId = btn.dataset.processId;
        const processName = encodeURIComponent(btn.dataset.processName);
        window.location.href = `/add-task?processId=${processId}&process=${processName}`;
      });
    });
  });
  </script>
</body>
</html>