<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Engineering Project Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/styles/homepage.css">
</head>
<body>
  <header class="dashboard-header">
    <img src="/images/accNewLog.webp" alt="Company Logo" class="logo" />
    <div class="header-right">
      <div>
        <select id="projectSelect">
          <option value="1">Downtown Tower Project</option>
          <option value="2">Coastal Bridge Project</option>
        </select>
        <a href="/logout" class="logout-btn">
          <i class="fas fa-sign-out-alt"></i> Log out
        </a>
      </div>
      <p>Welcome: Rashid Khreiss (Project Manager)</p>
    </div>
  </header>

  <nav class="main-nav">
    <a href="#" data-id="1"><i class="fas fa-shopping-cart"></i> Procurement</a>
    <a href="#" data-id="2"><i class="fas fa-file-contract"></i> Finance</a>
    <a href="#" data-id="3"><i class="fas fa-calculator"></i> HR</a>
    <a href="#" data-id="4"><i class="fas fa-calculator"></i> IT</a>
    <a href="#" data-id="5"><i class="fas fa-truck"></i> Logistics</a>
    <a href="#" data-id="6"><i class="fas fa-chart-bar"></i> Reports</a>
  </nav>

  <button class="mobile-nav-toggle" id="mobileNavToggle">
    <i class="fas fa-bars"></i>
  </button>

  <div class="mobile-nav" id="mobileNav">
    <a href="#" data-id="1"><i class="fas fa-shopping-cart"></i> Procurement</a>
    <a href="#" data-id="2"><i class="fas fa-file-contract"></i> Finance</a>
    <a href="#" data-id="3"><i class="fas fa-calculator"></i> HR</a>
    <a href="#" data-id="4"><i class="fas fa-calculator"></i> IT</a>
    <a href="#" data-id="5"><i class="fas fa-truck"></i> Logistics</a>
    <a href="#" data-id="6"><i class="fas fa-chart-bar"></i> Reports</a>
  </div>

  <main class="main-content">
<section class="quick-actions">
  <h3 class="section-title"><i class="fas fa-bolt"></i> Quick Actions</h3>
  <div class="actions-grid">
    <a href="/addPackage" class="action-btn"><i class="fas fa-box-open"></i> Add Package</a>
    <a href="/addProcess" class="action-btn"><i class="fas fa-cogs"></i> Add Process</a>
    <a href="/addUser" class="action-btn"><i class="fas fa-user-plus"></i> Add User</a>
    <a href="/add-task" class="action-btn"><i class="fas fa-tasks"></i> Add Task</a>
    <a href="/addProject" class="action-btn"><i class="fas fa-project-diagram"></i> Add Project</a>
  </div>
</section>
   
    <section class="activity-table">
      <div class="package-info">
       <div class="package-item">
          <span class="info-label">Item Description:</span>
          <div class="info-value">
            <input type="text" value="Structural Steel Beams" disabled>
          </div>
        </div>
        <div class="package-item">
          <span class="info-label">Time Requested (days):</span>
          <div class="info-value">
            <input type="number" value="14" disabled>
          </div>
        </div>
        <div class="package-item">
          <span class="info-label">Delay (days):</span>
          <div class="info-value">
            <input type="number" value="2" disabled>
          </div>
        </div>
        <div class="package-item">
          <span class="info-label">Planned Duration:</span>
          <div class="info-value">
            <input type="text" value="14 days" disabled>
          </div>
        </div>
        <div class="package-item">
          <span class="info-label">Actual Duration:</span>
          <div class="info-value">
            <input type="text" value="16 days" disabled>
          </div>
        </div>
      </div>

      <h3 id="activityTitle" class="section-title"><i class="fas fa-clipboard-list"></i> Procurement Activities</h3>
      <table>
        <thead>
          <tr>
            <th>Task Name</th>
            <th>Planned Date</th>
            <th>Days Required</th>
            <th>Finished Date</th>
            <th>Status</th>
            <th>Reason</th>
            <th>btns</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    </section>
  </main>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const projectSelect = document.getElementById('projectSelect');
    const mobileNavToggle = document.getElementById('mobileNavToggle');
    const mobileNav = document.getElementById('mobileNav');
    const navLinks = document.querySelectorAll('.main-nav a, .mobile-nav a');
    const activityTitle = document.getElementById('activityTitle');
    let currentDepartmentID = null;

    if (projectSelect) {
      projectSelect.addEventListener('change', function () {
        localStorage.setItem('selectedProject', this.value);
      });

      const savedProject = localStorage.getItem('selectedProject');
      if (savedProject) {
        projectSelect.value = savedProject;
      }
    }

    if (mobileNavToggle && mobileNav) {
      mobileNavToggle.addEventListener('click', () => {
        mobileNav.classList.toggle('active');
      });
    }

    function refreshTasks() {
      if (currentDepartmentID) {
        fetchDepartmentTasks(currentDepartmentID);
      } else {
        console.warn("⚠ No department selected.");
      }
    }

    navLinks.forEach(link => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const departmentName = link.textContent.trim();
        const departmentID = link.dataset.id;
        currentDepartmentID = departmentID;

        activityTitle.innerHTML = `<i class="fas fa-clipboard-list"></i> ${departmentName} Activities`;

        refreshTasks();
      });
    });
document.addEventListener('click', async (e) => {
  if (e.target.closest('.delete-btn')) {
    const taskId = e.target.closest('.delete-btn').dataset.taskId;
    
    if (!confirm('Are you sure you want to delete this finished task?')) {
      return;
    }

    try {
      const response = await fetch(`/delete-task/${taskId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        alert('Task deleted successfully');
        refreshTasks(); 
      } else {
        const error = await response.json();
        alert(error.error || 'Failed to delete task');
      }
    } catch (err) {
      console.error('Delete error:', err);
      alert('Network error - please try again');
    }
  }
});
    function fetchDepartmentTasks(departmentID) {
      fetch(`/api/tasks/by-department/${departmentID}`)
        .then(res => res.json())
        .then(data => {
          const tbody = document.querySelector("tbody");
          tbody.innerHTML = "";

          data.forEach((task, index) => {
            const row = document.createElement("tr");

            const plannedDate = task.PlannedDate
              ? new Date(task.PlannedDate).toISOString().split("T")[0]
              : "-";
            const finishedDate = task.DateFinished
              ? new Date(task.DateFinished).toISOString().split("T")[0]
              : "-";

            const status = task.Delay === null
              ? `<span class="status-badge status-pending">Pending</span>`
              : task.Delay > 0
                ? `<span class="status-badge status-delayed">Delayed ${task.Delay} day(s)</span>`
                : `<span class="status-badge status-on-time">On time</span>`;

 row.innerHTML = `
  <td>${task.TaskName}</td>
  <td>${plannedDate}</td>
  <td>-</td>
  <td>${finishedDate}</td>
  <td>${status}</td>
  <td>${task.DelayReason || ""}</td>
  <td class="action-buttons">
    ${!task.DateFinished ? 
      `<button class="edit-btn" data-task-id="${task.TaskID}">
        <i class="fas fa-edit"></i> Edit
      </button>` : ''}
    
    ${task.DateFinished ? 
      `<button class="delete-btn" data-task-id="${task.TaskID}">
        <i class="fas fa-trash-alt"></i> Delete
      </button>` : ''}
  </td>
`;

document.addEventListener('click', (e) => {
  if (e.target.closest('.edit-btn')) {
    const taskId = e.target.closest('.edit-btn').dataset.taskId;
    window.location.href = `/edit-task/${taskId}`;
  }
});

row.innerHTML = `
  <td>${task.TaskName}</td>
  <td>${plannedDate}</td>
  <td>${task.DaysRequired}</td>
  <td>${finishedDate}</td>
  <td>${status}</td>
  <td>${task.DelayReason || ""}</td>
  <td class="action-buttons">
    ${!task.DateFinished ? 
      `<button class="edit-btn" data-task-id="${task.TaskID}">
        <i class="fas fa-edit"></i> Edit
      </button>` : ''}
    
    ${task.DateFinished ? 
      `<button class="delete-btn" data-task-id="${task.TaskID}">
        <i class="fas fa-trash-alt"></i> Delete
      </button>` : ''}
  </td>
`;

document.addEventListener('click', async (e) => {
  if (e.target.closest('.delete-btn')) {
    const taskId = e.target.closest('.delete-btn').dataset.taskId;
    
   

    try {
      const response = await fetch(`/delete-task/${taskId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        refreshTasks(); 
      } else {
        const error = await response.json();
        alert(error.error || 'Failed to delete task');
      }
    } catch (err) {
      console.error('Delete error:', err);
      alert('Network error - please try again');
    }
  }
});

            row.setAttribute("draggable", true);
            row.setAttribute("data-finished", task.DateFinished ? "true" : "false");
            row.setAttribute("data-delay", task.Delay || 0);
            row.setAttribute("data-task-id", task.TaskID);
            row.setAttribute("data-task-name", task.TaskName);

            if (task.DateFinished || (task.Delay && task.Delay > 0)) {
              row.style.opacity = "0.6";
              row.style.cursor = "not-allowed";
            }

            if (task.IsTaskSelected) {
              row.classList.add("active-task");
            }
            row.addEventListener("dragstart", (e) => {
              const isFinished = row.getAttribute("data-finished") === "true";
              const delay = parseInt(row.getAttribute("data-delay"));

              if (isFinished || delay > 0) {
                e.preventDefault();
                console.log("❌ Drag prevented: Finished or delayed task");
              } else {
                e.dataTransfer.setData("text/taskID", task.TaskID);
                e.dataTransfer.setData("text/taskName", task.TaskName);
                row.classList.add("dragging");
              }
            });

            row.addEventListener("dragover", (e) => {
              e.preventDefault();
              row.style.border = "2px dashed #007bff";
            });

            row.addEventListener("dragleave", () => {
              row.style.border = "";
            });

            row.addEventListener("drop", (e) => {
              e.preventDefault();
              row.style.border = "";

              const draggedTaskID = e.dataTransfer.getData("text/taskID");
              const droppedTaskID = row.getAttribute("data-task-id");

              handleTaskDrop(draggedTaskID, droppedTaskID);
            });

            row.addEventListener("dragend", () => {
              row.classList.remove("dragging");
            });

            tbody.appendChild(row);

            setTimeout(() => {
              row.style.opacity = '1';
              row.style.transform = 'translateY(0)';
            }, index * 100);
          });
        })
        .catch(err => {
          console.error("❌ Error fetching tasks:", err);
        });
    }

    function handleTaskDrop(taskIdA, taskIdB) {
      console.log(taskIdA, taskIdB)
      fetch('/api/tasks/switch-details', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ taskIdA, taskIdB })
      })
        .then(res => res.json())
        .then(result => {
          if (result.success) {
            console.log("✅ Tasks swapped.");
            refreshTasks();
          } else {
            alert("Swap failed.");
          }
        })
        .catch(err => {
          console.error("Swap error:", err);
        });
    }
  });
</script>


</body>
</html>
